// Конвертация УХ 1.3 от 27.11.2018 17:53:27
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
			"СкладПоУмолчанию,
			|ПравилаЗагрузкиПодразделений,
			|РазрешитьПроведениеДокументовПриЗагрузке,
			|НоменклатурнаяГруппаПоУмолчанию,
			|СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
			
		КонецЕсли;
		
		// Загрузка договоров контрагентов может выполняться в некоторых случаях и по ссылке.
		// В этом случае, если договор не найден - нужно его все равно создавать.
		// Поэтому установим для ПКО Справочник_ДоговорыКонтрагентов признак "РазрешитьСоздаватьОбъектИзСтруктуры" в Истина
		ПКОДоговоры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов");
		ПКОДоговоры.РазрешитьСоздаватьОбъектИзСтруктуры = Истина;
		
		// Для версий формата 1.3 и старше созданием ПКО управляет флаг - "УчетВыручкиВОперационнойКассе" в объекте "ОтчетОРозничныхПродажах"
		КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") ;
		КомпонентыОбмена.ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
			
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
	
		// Инициализация таблицы для отложенного заполнения документов.
			
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяПКО");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
	
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеОбъекты = ЗагруженныеОбъекты;
		КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов = Новый Массив;
	
		// Инициализация таблицы "проблемных" счетов фактур, где может потребоваться дозаполнение документов оснований.
		СчетаФактурыЗаполнитьДокументыОснования = Новый ТаблицаЗначений;
		СчетаФактурыЗаполнитьДокументыОснования.Колонки.Добавить("СчетФактура");
		СчетаФактурыЗаполнитьДокументыОснования.Колонки.Добавить("ДанныеXDTO_ДокументыОснования");
		КомпонентыОбмена.ПараметрыКонвертации.Вставить("СчетаФактурыЗаполнитьДокументыОснования", СчетаФактурыЗаполнитьДокументыОснования);
		
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности выданных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров"));
	
		СчетФактурыВыданныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке = СчетФактурыВыданныеКОбработке;
	
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности полученных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
	
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ГТДИмпорт"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
		СчетФактурыПолученныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке = СчетФактурыПолученныеКОбработке;	
	    // Отчеты о розничных продажах, для которых необходимо создать ПКО
		КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов          = Новый Соответствие;
		
		//Инициализируем массив КлассификатораТНВЭД
		//для заполнения единицы измерения
		МассивТНВЭД = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД = МассивТНВЭД;
		
		СтатусыДокументовКЗагрузке = Новый ТаблицаЗначений();
		СтатусыДокументовКЗагрузке.Колонки.Добавить("Документ", Метаданные.РегистрыСведений.СтатусыДокументов.Измерения.Документ.Тип);
		СтатусыДокументовКЗагрузке.Колонки.Добавить("Статус", Метаданные.РегистрыСведений.СтатусыДокументов.Ресурсы.Статус.Тип);
		СтатусыДокументовКЗагрузке.Колонки.Добавить("ДополнительныйСтатус", Метаданные.РегистрыСведений.СтатусыДокументов.Ресурсы.ДополнительныйСтатус.Тип);
		КомпонентыОбмена.ПараметрыКонвертации.СтатусыДокументовКЗагрузке = СтатусыДокументовКЗагрузке;
		
	Иначе
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
				"ВыгружатьАналитикуПоСкладам");
				
		КонецЕсли;
		ДатаОстатков = Неопределено;
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДатаОстатков", ДатаОстатков)
			И ТипЗнч(ДатаОстатков) = Тип("Дата") Тогда
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов", НачалоДня(КонецДня(ДатаОстатков) + 1));
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		УстановитьЗначенияФункциональныхОпций();
	
		ПрефиксыЗагруженныхДокументов = КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов;
		Если ПрефиксыЗагруженныхДокументов.Количество() > 0 Тогда
			ОбменДаннымиУТ.ЗаписьРегистраПрефиксыИнформационныхБазПоУмолчанию(ПрефиксыЗагруженныхДокументов);
		КонецЕсли;
		ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		
		// Формирование структуры подчиненности выданных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурВыданных(КомпонентыОбмена);
	
		// Формирование структуры подчиненности полученных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурПолученных(КомпонентыОбмена);
		
		// Обработка отчетов о розничных продажах
		СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена);
		
		ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена);
		
		ОбновитьСтатусыДокументов(КомпонентыОбмена);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена);
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеКредитовДепозитов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаТоваровВРознице(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостач(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатурыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК БанковскийСчет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|			ТОГДА ""Расчетный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Аккредитивы))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АккредитивыВал))
	|			ТОГДА ""Аккредитивы""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЧековыеКнижки))
	|			ТОГДА ""ЧековыеКнижки""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал))
	|			ТОГДА ""Депозитный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчета))
	|			ТОГДА ""Иной""
	|		ИНАЧЕ ""Иной""
	|	КОНЕЦ КАК ВидБанковскогоСчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток > 0 И ХозрасчетныйОстатки.Субконто1 <>  ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|	ХозрасчетныйОстатки.Субконто1
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата        = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");
		Колонки.Добавить("ВидБанковскогоСчета");
		Колонки.Добавить("БанковскийСчет");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Если ВыборкаДетальная.Сумма > 0 Тогда
				НоваяСтрока = ДенежныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолженностиПодотчетныхЛиц");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоДтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетДт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И (Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					ИЛИ Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДокументыПоДтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоДт
	|ИЗ
	|	ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоДтВсе.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоДт
	|ИЗ
	|	ДатыПоследнихДокументовПоДт КАК ДатыПоследнихДокументовПоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|		ПО ДатыПоследнихДокументовПоДт.ДатаПоследнегоДвижения = ДокументыПоДтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоДт.ФизическоеЛицо = ДокументыПоДтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоДт.Организация = ДокументыПоДтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоДт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоДт КАК ПоследниеДокументыПоДт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоДт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоДт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиКредитыЗаймы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитыЗаймы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "КредитыЗаймы");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.Валюта,
	|	Таб.СуммаРегл,
	|	Таб.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация КАК Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|					И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы),
	|				,
	|				) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|		ХозрасчетныйОстатки.СуммаОстаток,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы), , ) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0) КАК Таб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таб.Организация,
	|	ЕСТЬNULL(Таб.Валюта, &ВалютаРегл)
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");	
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		Если ДенежныеСредства.Количество() > 0 Тогда
			
			ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
			
			МассивВыборки.Добавить(ДанныеИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиНематериальныхАктивов_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНематериальныхАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНематериальныхАктивов");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаНМАЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаНМАЭталон.Колонки;
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	// Справочные данные НМА.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("ПрочиеСведения");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ВидОбъектаУчета");
	// Стоимость НМА.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьВР");
	// Принятие к учету НМА.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("ДатаПриобретения");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииНУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("КоэффициентБУ");
	КолонкиТаблицы.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияВР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(ТекущаяСтоимостьВР) 		КАК ТекущаяСтоимостьВР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР,
		|Сумма(НакопленнаяАмортизацияВР) КАК НакопленнаяАмортизацияВР
		|ПОМЕСТИТЬ ТаблицаСтоимостьНМА
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	ХозрасчетныйОстатки.СуммаВРОстаток 			КАК ТекущаяСтоимостьВР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР,
		|	0 											КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	0 											КАК ТекущаяСтоимостьВР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьНМА.Организация 								КАК Организация,
		|	ТаблицаСтоимостьНМА.Подразделение 								КАК Подразделение,
		|	ТаблицаСтоимостьНМА.НМА.Наименование 							КАК Наименование,
		|	ТаблицаСтоимостьНМА.НМА.Код 									КАК КодВПрограмме,
		// Справочные данные.
		|	ТаблицаСтоимостьНМА.НМА.НаименованиеПолное 						КАК НаименованиеПолное,
		|	ТаблицаСтоимостьНМА.НМА.ПрочиеСведения 							КАК ПрочиеСведения,
		|	ТаблицаСтоимостьНМА.НМА.АмортизационнаяГруппа 					КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьНМА.НМА.ВидОбъектаУчета 						КАК ВидОбъектаУчета,
		// Стоимость.
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьВР 							КАК ТекущаяСтоимостьВР,
		|	ПервоначальныеСведенияНМАБУ.ПервоначальнаяСтоимость 			КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияНМАНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияВР 					КАК НакопленнаяАмортизацияВР,
		|	ПервоначальныеСведенияНМАБУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюБУ,
		|	ПервоначальныеСведенияНМАНУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияНМАБУ.Коэффициент 						КАК КоэффициентБУ,
		|	ПервоначальныеСведенияНМАБУ.СпособНачисленияАмортизации 		КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияНМАНУ.МетодНачисленияАмортизации 			КАК СпособНачисленияАмортизацииНУ,
		|	ПервоначальныеСведенияНМАБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПервоначальныеСведенияНМАНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведенияНМАБУ.ОбъемПродукцииРаботДляВычисленияАмортизации	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаНМА.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		// Принятие к учету.
		|	ПервоначальныеСведенияНМАБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияНМАНУ.ДатаПриобретения 					КАК ДатаПриобретения,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СчетаУчетаНМА.СчетУчета.Код 									КАК СчетУчетаБУ,
		// Использование до 2009г.
		|	ПервоначальныеСведенияНМАНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияНМАНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьНМА КАК ТаблицаСтоимостьНМА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАБУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАБУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАНУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАНУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьНМА.НМА = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&ДатаОстатков, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьНМА.НМА = СобытиеПриемКУчету.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаНМА
		|ПО ТаблицаСтоимостьНМА.НМА = СчетаУчетаНМА.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СчетаУчетаНМА.Организация
		|ИТОГИ ПО
		|	ТаблицаСтоимостьНМА.Организация,
		|	ТаблицаСтоимостьНМА.Подразделение
		|";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, НематериальныеАктивы");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаНМА = ТаблицаНМАЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаНМА = ТаблицаНМА.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНМА, Выборка);
			КонецЦикла;
			ДанныеИБ.НематериальныеАктивы = ТаблицаНМА;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиОсновныхСредств_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиОсновныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиОсновныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаОСЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаОСЭталон.Колонки;
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	КолонкиТаблицы.Добавить("ИнвентарныйНомер");
	КолонкиТаблицы.Добавить("МОЛ");
	// Справочные данные ОС.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("Комментарий");
	КолонкиТаблицы.Добавить("Изготовитель");
	КолонкиТаблицы.Добавить("ЗаводскойНомер");
	КолонкиТаблицы.Добавить("НомерПаспорта");
	КолонкиТаблицы.Добавить("ДатаВыпуска");
	// Стоимость ОС.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	// Принятие к учету ОС.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("НомерДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("НазваниеДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуСсылка");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуНаименование");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуВидСобытия");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчету");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ГруппаОС");
	КолонкиТаблицы.Добавить("КодПоОКОФ");
	КолонкиТаблицы.Добавить("ШифрПоЕНАОФ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиБУ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиНУ");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУСсылка");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентУскоренияБУ");
	КолонкиТаблицы.Добавить("ОбъемНаработкиБУ");
	КолонкиТаблицы.Добавить("ПоказательНаработки");
	КолонкиТаблицы.Добавить("ПоказательНаработкиСсылка");
	КолонкиТаблицы.Добавить("ПоказательНаработкиНаименование");
	КолонкиТаблицы.Добавить("ПоказательНаработкиЕдиницаИзмерения");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	КолонкиТаблицы.Добавить("НакопленнаяВыработка");
	// Модернизация ОС.
	КолонкиТаблицы.Добавить("ДатаПоследнейМодернизации");
	КолонкиТаблицы.Добавить("НазваниеДокументаМодернизации");
	КолонкиТаблицы.Добавить("НомерДокументаМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииСсылка");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииНаименование");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииВидСобытия");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.ОсновноеСредство,
		|Таб.Организация,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР
		|ПОМЕСТИТЬ ТаблицаСтоимостьОС
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|														ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.ОсновноеСредство,
		|Таб.Организация
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьОС.Организация 									КАК Организация,
		|	МестонахождениеОСБУ.Местонахождение 							КАК Подразделение,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Наименование 				КАК Наименование,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Код 						КАК КодВПрограмме,
		|	ЕстьNULL(ПервоначальныеСведенияОСБУ.ИнвентарныйНомер, """") 	КАК ИнвентарныйНомер,
		|	МестонахождениеОСБУ.МОЛ 										КАК МОЛ,
		// Справочные данные.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НаименованиеПолное 			КАК НаименованиеПолное,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Изготовитель 				КАК Изготовитель,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ЗаводскойНомер 				КАК ЗаводскойНомер,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НомерПаспорта 				КАК НомерПаспорта,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ДатаВыпуска 				КАК ДатаВыпуска,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Комментарий 				КАК Комментарий,
		// Стоимость.
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость 				КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияОСНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	НачислениеАмортизацииОСБУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюБУ,
		|	НачислениеАмортизацииОСНУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации 			КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки 					КАК ПоказательНаработкиСсылка,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.Наименование 		КАК ПоказательНаработкиНаименование,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.ЕдиницаИзмерения 	КАК ПоказательНаработкиЕдиницаИзмерения,
		|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРабот 					КАК ОбъемНаработкиБУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииБУ,
		|	ПараметрыАмортизацииОСНУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииНУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения 					КАК КоэффициентУскоренияБУ,
		|	ГрафикиАмортизацииОСБУ.ГрафикАмортизации 						КАК ГрафикАмортизацииБУСсылка,
		|	НачислениеАмортизацииОССпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаОС.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		|	ВыработкаОС.КоличествоОборот 									КАК НакопленнаяВыработка,
		// Принятие к учету.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ГруппаОС 					КАК ГруппаОС,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.АмортизационнаяГруппа 		КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ШифрПоЕНАОФ.Код 			КАК ШифрПоЕНАОФ,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.КодПоОКОФ.Код 				КАК КодПоОКОФ,
		|	ПервоначальныеСведенияОСБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости 			КАК ПорядокПогашенияСтоимостиБУ,
		|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокПогашенияСтоимостиНУ,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СобытиеПриемКУчету.НомерДокумента	 							КАК НомерДокументаПринятияКУчету,
		|	СобытиеПриемКУчету.Событие 										КАК СобытиеПринятияКУчетуСсылка,
		|	СобытиеПриемКУчету.Событие.Наименование 						КАК СобытиеПринятияКУчетуНаименование,
		|	СобытиеПриемКУчету.Событие.ВидСобытияОС 						КАК СобытиеПринятияКУчетуВидСобытия,
		|	СобытиеПриемКУчету.НазваниеДокумента							КАК НазваниеДокументаПринятияКУчету,
		|	СчетаУчетаОС.СчетУчета.Код 										КАК СчетУчетаБУ,
		// Модернизация.
		|	СобытиеМодернизация.Период			 							КАК ДатаПоследнейМодернизации,
		|	СобытиеМодернизация.НомерДокумента	 							КАК НомерДокументаМодернизации,
		|	СобытиеМодернизация.Событие 									КАК СобытиеМодернизацииСсылка,
		|	СобытиеМодернизация.Событие.Наименование 						КАК СобытиеМодернизацииНаименование,
		|	СобытиеМодернизация.Событие.ВидСобытияОС 						КАК СобытиеМодернизацииВидСобытия,
		|	СобытиеМодернизация.НазваниеДокумента							КАК НазваниеДокументаМодернизации,
		// Использование до 2009г.
		|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьОС КАК ТаблицаСтоимостьОС
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ГрафикиАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ГрафикиАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ГрафикиАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК МестонахождениеОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = МестонахождениеОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОССпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОССпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		|							ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеПриемКУчету.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)) КАК СобытиеМодернизация
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеМодернизация.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеМодернизация.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СчетаУчетаОС.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ВыработкаОС.Обороты(,&ДатаОстатков) КАК ВыработкаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ВыработкаОС.Организация
		|	И ПервоначальныеСведенияОСБУ.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
		|ИТОГИ ПО
		|	ТаблицаСтоимостьОС.Организация,
		|	МестонахождениеОСБУ.Местонахождение
		|";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, ОсновныеСредства");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаОС = ТаблицаОСЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаОС = ТаблицаОС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОС, Выборка);
			КонецЦикла;
			ДанныеИБ.ОсновныеСредства = ТаблицаОС;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетныхЛиц");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоКтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетКт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И Регистратор ССЫЛКА Документ.АвансовыйОтчет,
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДокументыПоКтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоКт
	|ИЗ
	|	ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоКтВсе.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоКт
	|ИЗ
	|	ДатыПоследнихДокументовПоКт КАК ДатыПоследнихДокументовПоКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|		ПО ДатыПоследнихДокументовПоКт.ДатаПоследнегоДвижения = ДокументыПоКтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоКт.ФизическоеЛицо = ДокументыПоКтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоКт.Организация = ДокументыПоКтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоКт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоКт КАК ПоследниеДокументыПоКт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоКт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоКт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиАвансы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиДолги");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиАвансы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиДолги");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)
		|				И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеИзделия)))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	Таб.СчетУчета,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.СтавкаНДС,
		|	Таб.СчетУчета
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	ТипыЗапасовФормата = Новый Массив();
	ТипыЗапасовФормата.Добавить("СырьеИМатериалы");
	ТипыЗапасовФормата.Добавить("ПокупныеПолуфабрикатыИКомплектующие");
	ТипыЗапасовФормата.Добавить("ВозвратнаяТара");
	ТипыЗапасовФормата.Добавить("Топливо");
	ТипыЗапасовФормата.Добавить("ЗапасныеЧасти");
	ТипыЗапасовФормата.Добавить("ПрочиеМатериалы");
	ТипыЗапасовФормата.Добавить("СтроительныеМатериалы");
	ТипыЗапасовФормата.Добавить("ИнвентарьИХозяйственныеПринадлежности");
	ТипыЗапасовФормата.Добавить("СпецоснасткаИСпецодеждаНаСкладе");
	ТипыЗапасовФормата.Добавить("СобственныеТовары");
	ТипыЗапасовФормата.Добавить("ПокупныеИзделия");
	ТипыЗапасовФормата.Добавить("ГотоваяПродукция");
	ТипыЗапасовФормата.Добавить("КомиссионныеТовары");
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.ТМЦ = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока.ВидЗапасов = СокрЛП(ВыборкаДетальныеЗаписи.СчетУчета.ИмяПредопределенныхДанных);
			Если ТипыЗапасовФормата.Найти(НоваяСтрока.ВидЗапасов) = Неопределено Тогда
				НоваяСтрока.ВидЗапасов = "СобственныеТовары";
			КонецЕсли;
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.ТМЦ = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТараПринятая";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументПоступления,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент,
	|	ХозрасчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТараПодТоваромИПорожняя)), , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления
	|ИТОГИ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления";
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклады.Следующий() Цикл
			ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДокументыПоступления.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
				
				ДанныеИБ = Новый Структура("Дата, Организация, Склад, Тара, Контрагент");
				ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
				
				ДанныеИБ.Дата = ДатаОстатков;
				ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
				
				Тара = Новый ТаблицаЗначений;
				Колонки = Тара.Колонки;
				Колонки.Добавить("Номенклатура");
				Колонки.Добавить("СуммаБезНДС");
				Колонки.Добавить("Количество");
				Колонки.Добавить("КоличествоУпаковок");
				Колонки.Добавить("НомерГТД");
				Колонки.Добавить("ЕдиницаИзмерения");
				Колонки.Добавить("СтавкаНДС");
				Колонки.Добавить("СуммаНДС");
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
						НоваяСтрока = Тара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
						
						НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
						НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
						
						СтавкаНДС = НоваяСтрока.СтавкаНДС;
						СтавкаНДСЧислом = 0;
						Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
							СтавкаНДСЧислом = 20;
						ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
							СтавкаНДСЧислом = 10;
						ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
							СтавкаНДСЧислом = 18;
						КонецЕсли;
						
						НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеИБ.Тара = Тара;
				
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомиссию");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
		|	И ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстатки.Организация,
		|	Контрагент
		|ИТОГИ ПО
		|	Организация,
		|	Контрагент";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаКонтрагент = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
			
			ДанныеИБ = Новый Структура("Дата, Организация, Товары, Контрагент");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаКонтрагент);
			
			ДанныеИБ.Дата        = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			
			Товары = Новый ТаблицаЗначений;
			Колонки = Товары.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("КоличествоУпаковок");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
					НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
					
					СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
				КонецЕсли;	
			КонецЦикла;
			
			ДанныеИБ.Товары = Товары;
			
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент КАК Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента КАК Договор,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Количество) КАК КоличествоУпаковок,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.СтавкаНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад,
		|	Контрагент,
		|	Договор";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ТекКонтрагент = Неопределено;
	ТекДоговор = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекКонтрагент <> ВыборкаДетальныеЗаписи.Контрагент Тогда
			ТекКонтрагент = ВыборкаДетальныеЗаписи.Контрагент;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		
		Если ТекДоговор <> ВыборкаДетальныеЗаписи.Договор Тогда
			ТекДоговор = ВыборкаДетальныеЗаписи.Договор;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.Товары = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, Товары, Контрагент, Договор");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.Товары = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.Ссылка,
		|	Док.Дата
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка КАК Ссылка,
		|		Док.Ссылка.Дата КАК Дата
		|	ИЗ Документ.ОтчетОРозничныхПродажах.Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка,
		|		Док.Ссылка.Дата
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	) КАК Док
		|УПОРЯДОЧИТЬ ПО Док.Дата
		|";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПКО_Отправка
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка    = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка            = Ложь;
	ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка       = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка       = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			//Данные о валюте конвертации можно взять только из договора
			//Если этих данных нет, придется выгружать документ как ПрочееПоступление
			Если ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
				ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			КонецЕсли;
		Иначе
		
			ДанныеСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом);
				
			Если ДанныеСчетаУчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
				ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			КонецЕсли;
	
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка             = Ложь;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		И ДанныеИБ.Проведен И ДанныеИБ.Склад.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПРС_Отправка
Процедура ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
		// расчетам по кредитам (займам) и прочим расчетам с контрагентами
		ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		// Конвертация валюты - из операций, связанных с конвертацией валюты
		ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		
		// Расчеты с сотрудниками - из возврата займа работником
		ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
	
		// Перевод с другого счета отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда 
	
		// Взнос наличными отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			// 91.01
			ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_ Тогда
			
			// 71.xx
			// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
			ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
			
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) И ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			// 60.xx, 62.xx, 66.xx, 67.xx 76.xx
			// Расчеты с контрагентами - из прочего поступления
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
			
		Иначе 
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		//Если в документе заполнены только агентские услуги - не отправляем
		И (ДанныеИБ.Товары.Количество() + ДанныеИБ.Услуги.Количество()  + ДанныеИБ.АгентскиеУслуги.Количество() + ДанныеИБ.ВозвратнаяТара.Количество() > 0) Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков) 
		И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов) Тогда
		
		МассивВыборки = Новый Массив;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Док
			|ГДЕ
			|	Док.Проведен
			|	И Док.Дата >= &ДатаНачала 
			|	И Док.Дата <= &ДатаОкончания";
	
		Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл
			МассивВыборки.Добавить(Выборка.Ссылка);
		КонецЦикла;
	
		Возврат МассивВыборки;
	
	КонецЕсли;
КонецФункции
#КонецОбласти
#Область Документ_РКО_Отправка
Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам 
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
		
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам, расчетам по кредитам (займам)
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		// Расчеты с сотрудниками - из операций по выплате депонентов и заработной платы, расчетов с подотчетниками
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	
		// Перемещение на банковский счет - из операций инкассации и взноса наличными в банк
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
	
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасходыНаПродажу
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
			
			// 20.xx, 23, 25, 26, 44.xx, 91.02
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			
			// 57.02, 57.22
			ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Истина;
		Иначе
			ДанныеСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом);
				
			Если ДанныеСчетаУчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
				ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеТоваров_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СписаниеЗапасов_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СписаниеНедостач_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.ИнвентаризацияТоваровНаСкладе) Тогда
		ИспользованиеПКО.Документ_СписаниеНедостач_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_СписаниеЗапасов_Отправка  = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СРС_Отправка
Процедура ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка    = Ложь;
	ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка         = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка        = Ложь;
	
	ВидПрочегоСписания = "";
	ВидРасчетовСКонтрагентом = "";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ") Тогда
			ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				Или СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
				//ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
			ИначеЕсли  ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
			И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
	
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП ИЛИ 
		ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
	
		// Списание наличных отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_СРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЦенаУстановленаХотяБыВОднойСтроке = Ложь;
	Для Каждого СтрокаТовара ИЗ ДанныеИБ.Товары Цикл
		Если СтрокаТовара.Цена <> 0 Тогда
			ЦенаУстановленаХотяБыВОднойСтроке = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЦенаУстановленаХотяБыВОднойСтроке Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|		ПО Док.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка
	|			И (УстановкаЦенНоменклатурыТовары.Цена <> 0)
	|ГДЕ
	|	Док.Проведен
	|	И Док.Дата >= &ДатаНачала
	|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры
#КонецОбласти
#Область РегистрСведений_СтатусыДокументов_Отправка
Процедура ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_СтатусыДокументов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СтатусыДокументов;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОплатыЗаказа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОтгрузкиЗаказа_Отправка");
КонецПроцедуры

Процедура ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СостояниеОтгрузкиЗаказа_Отправка = Ложь;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ДанныеИБ.Отбор.Документ.Использование
		И ТипЗнч(ДанныеИБ.Отбор.Документ.Значение) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Истина;
		ИспользованиеПКО.Справочник_СостояниеОтгрузкиЗаказа_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Справочник_Банки_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Код,
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	Банки.КоррСчет,
		|	Банки.Город,
		|	Банки.Адрес,
		|	Банки.ЭтоГруппа,
		|	Банки.Телефоны
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	НЕ Банки.ЭтоГруппа";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВыборки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Код,Наименование,КоррСчет,Город,Адрес,Телефоны,Ссылка,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);	
	
		МассивВыборки.Добавить(Структура);	
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ВидыНоменклатур" добавлен в версии 1.6.
	ИспользованиеПКО.Справочник_ВидыНоменклатуры_Отправка = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Функция ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ Справочник.ДоговорыКонтрагентов
	|ГДЕ ЭтоГруппа = Ложь";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ДокументыФизическихЛиц" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Должности_Отправка
Процедура ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Должности;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Должности_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ПОД_Справочник_Должности_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КонтрагентыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЛицензииПоставщиковАлкогольнойПродукции_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ЛицензииПоставщиковАлкогольнойПродукции" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.ЛицензииПоставщиковАлкогольнойПродукции_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатурнаяГруппа_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатурныеГруппыГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыРасходы_Отправка
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПрочиеДоходыРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДоходов_Отправка  = Ложь;
	ИспользованиеПКО.Справочник_СтатьиРасходов_Отправка = Ложь;
	
	// Определим, для каких счетов используется статья прочих доходов и расходов
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	И ХозрасчетныйСубконто.Значение = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.ВидДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Значение = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДвижения = ВидДвиженияБухгалтерии.Кредит Тогда
			ИспользованиеПКО.Справочник_СтатьиДоходов_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Справочник_СтатьиРасходов_Отправка = Истина;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СкладыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_СкладыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Склады_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатурыГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СпецификацииНоменклатурыГруппа_Отправка = ДанныеИБ.ЭтоГруппа
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС       = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ШтрихкодыНоменклатуры" добавлен в версии 1.4.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет
Процедура ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_АвансовыйОтчет_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение_ПоляПоиска");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьСсылка = ДанныеXDTO.КлючевыеСвойства.Свойство("Ссылка");
	
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = ЕстьСсылка;
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение_ПоляПоиска = Не ЕстьСсылка;
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АннулированиеПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("АннулированиеПодарочныхСертификатов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзПроизводства_Получение
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзПроизводства_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзЭксплуатации_Получение
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзЭксплуатации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаличными");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Истина;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Ложь;
	Иначе
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Ложь;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяДавальцу_Получение
Процедура ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратСырьяДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяОтПереработчика_Получение
Процедура ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыпускПродукции_Получение
Процедура ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыпускПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыпускПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыпускПродукции_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Получение
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Получение
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ИнвентаризацияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Получение
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаДолга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Получение
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализацииТоваров
Процедура ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализацииТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_НачислениеКредитовДепозитов_Получение
Процедура ДобавитьПОД_Документ_НачислениеКредитовДепозитов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачислениеКредитовДепозитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеКредитовДепозитов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеКредитовДепозитов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоОперациямЭквайринга_Получение
Процедура ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетБанкаПоОперациямЭквайринга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ = Ложь;
	Если ДанныеXDTO.Свойство("СуммаКомиссии") И ДанныеXDTO.СуммаКомиссии > 0 Тогда
		ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетДавальцу_Получение
Процедура ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомиссионера";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_ОРП");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах = Истина;
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_ОРП = Ложь;
	
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	
	Если ЕстьТовары Тогда
		Для Каждого Товар Из ДанныеXDTO.Товары Цикл
			Если Товар.Количество < 0 Тогда
				ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_ОРП = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПереработчика_Получение
Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаДавальцу_Получение
Процедура ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВПроизводство_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВЭксплуатацию_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМатериаловВЭксплуатацию_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаПереработчику_Получение
Процедура ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаПереработчику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаПереработчику";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПередачаПереработчику_Получение = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПереоценкаТоваровВРознице
Процедура ДобавитьПОД_Документ_ПереоценкаТоваровВРознице(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПереоценкаТоваровВРознице";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПереоценкаТоваровВРознице";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаТоваровВРознице");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка Тогда
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Получение
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПлатежноеПоручение";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеОтПереработчика_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеОтПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеСырьяОтДавальца_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеСырьяОтДавальца_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеДопРасходов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровПоставщику");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровСтороннейКомпании");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_СписаниеТоваров");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ОприходованиеТоваров");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Поиск данных для ПКО
	
	// ПТиУ_ПоступлениеДопРасходов и ПТиУ_ПоступлениеТоваровУслуг 
	ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг             = Ложь;
	ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов              = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику        = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Ложь;
	ИспользованиеПКО.ПТиУРасх_СписаниеТоваров                 = Ложь;
	ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров            = Ложь;
	
	Если ДанныеXDTO.Свойство("Услуги") Тогда
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			Если Услуги_Строка.ЭтоДопРасходы = Неопределено Тогда
				Услуги_Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;	
		
			Если Услуги_Строка.ЭтоДопРасходы Тогда
				ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов = Истина;
			Иначе
				ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов
		И (Не ДанныеXDTO.Свойство("РасшифровкаДопРасходов") Или ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0) Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов  = Ложь;
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары") Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
	КонецЕсли;
	
	// ПТиУРасх_ВозвратТоваровПоставщику, ПТиУРасх_ВозвратТоваровСтороннейКомпании и ПТиУРасх_СписаниеТоваров
	Если ДанныеXDTO.Свойство("Недостачи") Тогда
		Для Каждого Недостачи_Строка Из ДанныеXDTO.Недостачи Цикл
			Если Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетСтороннейКомпании" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Истина;
			Иначе // НаПрочиеРасходы и все остальное
				ИспользованиеПКО.ПТиУРасх_СписаниеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ПТиУРасх_ОприходованиеТоваров, ПТиУРасх_ВозвратТоваровПоставщику
	Если ДанныеXDTO.Свойство("Излишки") Тогда
		Для Каждого Излишки_Строка ИЗ ДанныеXDTO.Излишки Цикл
			Если Излишки_Строка.ВариантОтражения.Значение = "ВПользуПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Излишки_Строка.ВариантОтражения.Значение = "НаПрочиеДоходы" Тогда
				ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияОтгруженныхТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РТиУБезПереходаПравСобственностиУслуги");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	ЕстьУслуги = ДанныеXDTO.Свойство("Услуги") И ДанныеXDTO.Услуги.Количество() > 0;
	
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Истина;
	Если (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
		Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано") И Не ЕстьТовары Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Ложь;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_РТиУБезПереходаПравСобственностиУслуги = ЕстьУслуги
		И (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
			Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано");
	
	ИспользованиеПКО.Документ_РеализацияОтгруженныхТоваров_Получение = ЕстьТовары
		И ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарПлЛицСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеПриСборке_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Ложь;
	Для Каждого СтрокаТовары ИЗ ДанныеXDTO.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.ТипЗапасов) И СтрокаТовары.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов
Процедура ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗапасов";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеМатериаловИзЭксплуатации_Получение
Процедура ДобавитьПОД_Документ_СписаниеМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеМатериаловИзЭксплуатации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеМатериаловИзЭксплуатации_Получени");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостач
Процедура ДобавитьПОД_Документ_СписаниеНедостач(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостач";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПоставщика_Получение
Процедура ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетПоставщика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Испр_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Счета-фактуры и исправленного счета-фактуры
	ИспользованиеПКО.Документ_СчетФактураВыданный_Получение      = Истина;
	ИспользованиеПКО.Документ_СчетФактураВыданный_Испр_Получение = Ложь;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ИспользованиеПКО.Документ_СчетФактураВыданный_Получение      = Ложь;
		ИспользованиеПКО.Документ_СчетФактураВыданный_Испр_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураПолученный";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Испр_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Счета-фактуры и исправленного счета-фактуры
	ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Истина;
	ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Ложь;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Ложь;
		ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Должности_Получение
Процедура ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Должности";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Должности_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ПОД_Справочник_Должности_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлкогольнойПродукции");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурнаяГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурнаяГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурныеГруппыГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатурыГруппа
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатурыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатурыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатурыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатурыГрупп_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа
Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	УИД = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		СсылкаСтатьяЗатрат = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(УИД, Тип("СправочникСсылка.СтатьиЗатрат"), КомпонентыОбмена);
		СсылкаПрочиеДоходыИРасходы = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(УИД, Тип("СправочникСсылка.ПрочиеДоходыИРасходы"), КомпонентыОбмена);
		
		Если Не СсылкаСтатьяЗатрат.Получитьобъект() = Неопределено Тогда
			ИспользованиеПКО.Вставить("Справочник_СтатьиРасходов_СтатьиЗатрат", Истина);
		КонецЕсли;
		
		Если Не СсылкаПрочиеДоходыИРасходы.Получитьобъект() = Неопределено Тогда
			ИспользованиеПКО.Вставить("Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы", Истина);
		КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_ОРП(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеКредитовДепозитов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаТоваровВРознице(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Испр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Испр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКП(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатурыГрупп_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_СтатьиЗатрат(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Должности(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",     "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",         "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",         "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                  "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПоставщикам");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//Табличные части
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Контрагент,
	|	Ложь,
	|	null,
	|	null
	|ИЗ Документ.АвансовыйОтчет.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	#КонецОбласти
	#Область ВыданныеАвансы
	Если ДанныеИБ.ВыданныеАвансы.Количество() > 0 Тогда
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Документ");
		ТаблицаАвансы.Колонки.Добавить("Сумма");
	
		Для Каждого Строка ИЗ ДанныеИБ.ВыданныеАвансы Цикл
			ИмяПКО = "";
			ТипДокумента = ТипЗнч(Строка.ДокументАванса);
			Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
	           ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	        Иначе
	        	Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАвансы.Добавить();
			СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументАванса, ИмяПКО);
			СтрокаТаблицы.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДокументАванса, "СуммаДокумента");
		КонецЦикла;
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	#КонецОбласти
	#Область ОплатаПоставщикам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагент,
	|   ДоговорКонтрагента КАК Договор,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|   КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов,
	|   СуммаВзаиморасчетов,
	|   Сумма,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|	СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	Сделка КАК ДанныеДокументаРасчетов
	|ИЗ Документ.АвансовыйОтчет.ОплатаПоставщикам
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОплатаПоставщикам = РезультатЗапроса.Выгрузить();
	Если ТаблицаОплатаПоставщикам.Количество() > 0 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаОплатаПоставщикам, "ОчищатьНеНайденные");
			ДанныеXDTO.Вставить("ОплатаКонтрагентам", ТаблицаОплатаПоставщикам);
		Иначе
			ДанныеXDTO.Вставить("ОплатаПоставщикам", ТаблицаОплатаПоставщикам);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	#Область Прочее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Прочее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПрочее = РезультатЗапроса.Выгрузить();
	Если ТаблицаПрочее.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПрочиеРасходы", ТаблицаПрочее);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровОтПокупателя
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратОтКомиссионера";
	Иначе 
		ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения
	|ИЗ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null
	|ИЗ Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сделка",                   "ДокументПоступления", , "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровПоставщику
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ВозвратКомитенту";
	Иначе 
		ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	ВЫРАЗИТЬ(ДокументОприходования КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	null
	|ИЗ Документ.ВозвратТоваровПоставщику.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",           "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СчетНаОплатуПокупателюТовары.Количество КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И СчетНаОплатуПокупателюТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПокупателюВозвратнаяТара.Количество,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И ЕстьNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "ДатаПоДаннымПоставщика",  "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерПоДаннымПоставщика", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Номенклатура", "Товары");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "ЕдиницаИзмерения", ,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "Номенклатура", ,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "СтавкаНДС", ,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "Цена");

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	AdditionalInfoВставить(ДанныеXDTO, "ДатаПоступления",         ДанныеИБ.ДатаПоступления);
	AdditionalInfoВставить(ДанныеXDTO, "Комментарий",             ДанныеИБ.Комментарий);
	AdditionalInfoВставить(ДанныеXDTO, "ДатаВходящегоДокумента",  ДанныеИБ.ДатаПоДаннымПоставщика);
	AdditionalInfoВставить(ДанныеXDTO, "НомерВходящегоДокумента", ДанныеИБ.НомерПоДаннымПоставщика);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаИнвентаризации",        "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияИнвентаризации",     "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеВид",            "ДокументОснованиеВид");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеДата",           "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеНомер",          "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо",               "ОтветственноеЛицо");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПричинаПроведенияИнвентаризации", "ПричинаПроведенияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "",                                "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
	|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Количество,
	|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК КоличествоУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.Цена КАК Цена,
	|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК СуммаУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице КАК ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                   "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",               "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяПрочихДоходовРасходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                      "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                            "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	НомерГТД.Код КАК НомерГТД,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.ОприходованиеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтатьяПрочихДоходовРасходов) Тогда
		ВыгрузитьПоСсылке(ДанныеИБ.СтатьяПрочихДоходовРасходов, КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидБанковскогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// ДокументРасчетов
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
			
			Инструкция = Новый Структура("Значение", Строка.ДокументРасчетов);
			Если ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
				Или ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_РКОРасчетыССотрудниками_Отправка");
			ИначеЕсли ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_СБДСРасчетыССотрудниками_Отправка");
			КонецЕсли;
			Строка.ДокументРасчетов = Инструкция;
			
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиКредитыЗаймы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты, "КраткосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал, "КраткосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам, "ПроцентыПоКраткосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал, "ПроцентыПоКраткосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы, "КраткосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал, "КраткосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам, "ПроцентыПоКраткосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал, "ПроцентыПоКраткосрочнымЗаймам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты, "ДолгосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал, "ДолгосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам, "ПроцентыПоДолгосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал, "ПроцентыПоДолгосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы, "ДолгосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал, "ДолгосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам, "ПроцентыПоДолгосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал, "ПроцентыПоДолгосрочнымЗаймам");
	
	Для Каждого Строка Из ДанныеИБ.Расчеты Цикл
		Строка.ВидРасчетов = ПравилаКонвертации.Получить(Строка.ВидРасчетов);	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНематериальныхАктивов
Процедура ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1, "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НематериальныеАктивы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизационнаяГруппа", 1,"Перечисление_АмортизационныеГруппы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизацияДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОбъектаУчета", 1,"ВидыОбъектовУчетаНМА");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПриобретения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Наименование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияВР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОбъемПродукцииРаботДляВычисленияАмортизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрочиеСведения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпециальныйКоэффициентНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииБУ", 1,"СпособыНачисленияАмортизацииНМАБУ");
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииНУ", 1,"СпособыНачисленияАмортизацииНМАНУ");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПоступления", 1,"Перечисление_СпособыПоступленияАктивов");
	ДобавитьПКС(СвойстваТЧ, "", "СрокИспользованияНУДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьВР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьПР", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НематериальныеАктивы", ДанныеИБ.НематериальныеАктивы);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиОсновныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиОсновныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиОсновныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1, "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОсновныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизационнаяГруппа", 1,"Перечисление_АмортизационныеГруппы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизацияДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГрафикАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаОС", 1,"Перечисление_ГруппыОС");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыпуска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПоследнейМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗаводскойНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Изготовитель", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИнвентарныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПоОКОФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентУскоренияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МОЛ", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НазваниеДокументаМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НазваниеДокументаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Наименование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокументаМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокументаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерПаспорта", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОбъемНаработкиБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПоказательНаработки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокПогашенияСтоимостиБУ", 1,"Перечисление_ПорядокПогашенияСтоимостиОС");
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокПогашенияСтоимостиНУ", 1,"ПорядокВключенияСтоимостиОСВСоставРасходовНУ");
	ДобавитьПКС(СвойстваТЧ, "", "СобытиеМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СобытиеПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпециальныйКоэффициентНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииБУ", 1,"Перечисление_СпособыНачисленияАмортизацииОС");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПоступления", 1,"Перечисление_СпособыПоступленияАктивов");
	ДобавитьПКС(СвойстваТЧ, "", "СрокИспользованияНУДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШифрПоЕНАОФ", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение свойств с типом КлючевыеСвойства в ТЧ ОС.
	Для Каждого СтрокаИБ ИЗ ДанныеИБ.ОсновныеСредства Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка)
			ИЛИ ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУ)) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеПринятияКУчетуНаименование, 
				СтрокаИБ.СобытиеПринятияКУчетуВидСобытия);
			СтрокаИБ.СобытиеПринятияКУчету = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеМодернизацииНаименование, 
				СтрокаИБ.СобытиеМодернизацииВидСобытия);
			СтрокаИБ.СобытиеМодернизации = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка)
			И ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения) Тогда
			ЕдиницаИзмеренияКлючевыеСвойства = Новый Структура("Ссылка, Код", 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения, 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения.Код);
			ПоказательНаработкиКлючевыеСвойства = Новый Структура("Наименование, ЕдиницаИзмерения", 
				СтрокаИБ.ПоказательНаработкиНаименование, 
				ЕдиницаИзмеренияКлючевыеСвойства);
			СтрокаИБ.ПоказательНаработки = ПоказательНаработкиКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУСсылка) Тогда
			ГрафикКлючевыеСвойства = Новый Структура("Наименование", СтрокаИБ.ГрафикАмортизацииБУСсылка.Наименование);
			Для ном = 1 По 12 Цикл
				ГрафикКлючевыеСвойства.Вставить("Коэффициент"+ном, 
					СтрокаИБ.ГрафикАмортизацииБУСсылка["Коэффициент"+ном]);
			КонецЦикла;
			СтрокаИБ.ГрафикАмортизацииБУ = ГрафикКлючевыеСвойства;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ОсновныеСредства", ДанныеИБ.ОсновныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1,"Документ_АвансовыйОтчет_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТМЦ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1,"Документ_СчетФактураПолученный_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТараПринятая";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Тара");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Тара", ДанныеИБ.Тара);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "УчетВыручкиВОперационнойКассе", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Ложь);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.НомерГТД.Код КАК НомерГТД,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.Контрагент КАК Принципал,
	|	Услуги.ДоговорКонтрагента КАК ДоговорСПринципалом,
	|	""Агентские"" КАК ТипУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.0") Тогда
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		Если ТаблицаУслуги.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОтправитель", "ПодразделениеОтправитель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеПолучатель",  "ПодразделениеПолучатель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",         "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",          "СкладПолучатель", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ТоварыНаКомиссии = ДанныеИБ.ТоварыНаКомиссии.Выгрузить();
	ВозвратнаяТара = ДанныеИБ.ВозвратнаяТара.Выгрузить();
	
	Для Каждого Строка Из ТоварыНаКомиссии Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
	КонецЦикла;
	
	Для Каждого Строка Из ВозвратнаяТара Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ТипЗапасов = "ВозвратнаяТара";
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	//Корректность и заполненность СубконтоКт2 проверяется в ПОД
	ВалютаКонвертации = ДанныеИБ.СубконтоКт2.ВалютаВзаиморасчетов;
	СтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
	СтрокаРП.Договор = ДанныеИБ.СубконтоКт2;
	
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	СтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		СтрокаРП.КурсКонвертации, СтрокаРП.КратностьКонвертации, ВалютаКонвертации);
	
	Если АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	Иначе
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
		СтрокаРП.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	КонецЕсли;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0") Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Контрагент = ДанныеИБ.Контрагент;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			 Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1,"Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрока.СтатьяДоходов = ДанныеИБ.СубконтоКт1;
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ВыгрузитьПоСсылке(ДанныеИБ.СубконтоКт1, КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1,"Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "КредитыИЗаймы");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "Прочее");
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если ДанныеXDTO.ВидРасчетов = "Прочее" Тогда
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПриходныйКассовыйОрдер.СубконтоКт1 КАК СубконтоКт1,
				|	ПриходныйКассовыйОрдер.СубконтоКт2 КАК СубконтоКт2,
				|	ПриходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
				|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.НеПогашать) КАК СпособПогашенияЗадолженности,
				|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
				|   Неопределено КАК Заказ
				|ИЗ
				|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
				|ГДЕ
				|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		ДанныеПлатежа = ТаблицаРасчетов[0];
		Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоКт1) Тогда
			Если ТипЗнч(ДанныеПлатежа.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДанныеXDTO.Вставить("Контрагент", ДанныеПлатежа.СубконтоКт1);
				Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоКт2)
					И ТипЗнч(ДанныеПлатежа.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					ТаблицаРасчетов.Колонки.СубконтоКт2.Имя = "Договор";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
		
		//Расшифровка платежа
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
		|   ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК Заказ
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
		Если ТаблицаРасчетов.Количество() > 0 
			И (ДанныеXDTO.ВидРасчетов = "СПокупателем" 
			ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
		КонецЕсли;
	КонецЕсли;
	ТаблицаРасчетов.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаРасчетов.ЗаполнитьЗначения(ДанныеИБ.ВалютаДокумента, "ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВыручкаСНТТ",              "ВыручкаНТТ");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",             "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",                "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",                 "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодБК",                         "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                      "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",                "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",                 "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",           "ПеречислениеВБюджет");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",                "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",              "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",           "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",             "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",                "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                     "СтавкаНДС");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",             "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТекстПлательщика",              "ТекстПлательщика");
	ДобавитьПКС(СвойстваШапки, "ТекстПолучателя",               "ТекстПолучателя");
	ДобавитьПКС(СвойстваШапки, "",                              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                              "Оплачено", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Валюта", ДанныеИБ.ВалютаДокумента);
	
	Оплачено = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(ДанныеИБ.Ссылка) = Перечисления.СостоянияБанковскихДокументов.Оплачено;
	ДанныеXDTO.Вставить("Оплачено", Оплачено);
		
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ПоступлениеТоваровУслуг
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия И
		Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ПриемНаКомиссию";
	Иначе
		// Возможно это закупка по импорту - страна происхождения заполнена, и это не Россия
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтранаПроисхождения
		|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
		|ГДЕ Ссылка = &Ссылка
		|	И СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|	И СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)"; 
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Если Запрос.Выполнить().Пустой() Тогда
			ВидОперации = "ПокупкаУПоставщика";
		Иначе
			ВидОперации = "ЗакупкаПоИмпорту";
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫБОР КОГДА ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) ТОГДА
	|		Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null
	|ИЗ Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Содержание,
	|	ВЫБОР КОГДА Количество = 0 ТОГДА
	|		1
	|	ИНАЧЕ
	|		Количество
	|	КОНЕЦ КАК Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.ПоступлениеТоваровУслуг.Услуги
	|ГДЕ Ссылка = &Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументАванса КАК ДанныеДокументаРасчетов,
	|	СуммаЗачета КАК Сумма
	|ИЗ Документ.ПоступлениеТоваровУслуг.ЗачетАвансов
	|ГДЕ Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	БезНДС = Ложь;
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			БезНДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если БезНДС Тогда
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаНеОблагаетсяНДС");
	Иначе	
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаОблагаетсяНДС");
	КонецЕсли;	
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	ТаблицаАвансов = РезультатЗапроса[2].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		 
		Запрос.Текст = "ВЫБРАТЬ
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
		|   Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
		|   КурсВзаиморасчетов КАК КурсКонвертации,
		|   КратностьВзаиморасчетов КАК КратностьКонвертации,
		|   СуммаВзаиморасчетов КАК Сумма,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК СуммаВал
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",              "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ЗАпрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорКонтрагента КАК Договор,
	|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаПлатежа КАК Сумма,
	|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|   СтавкаНДС КАК СтавкаНДС,
	|   СуммаНДС КАК СуммаНДС
	|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	// РасшифровкаПлатежа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчет.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1,"Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт3);
		КонецЕсли;
	КонецЕсли;
	
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубконтоКт1 КАК СтатьяДоходов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПоступлениеНаРасчетныйСчет
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДоходов) Тогда
			ВыгрузитьПоСсылке(СтрокаРасшифровки.СтатьяДоходов, КомпонентыОбмена);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1,"Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	#Область РасшифровкаПлатежа
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Контрагент = ДанныеИБ.СубконтоКт1;
		
		ТекстЗапросаРасшифровкаПлатежа = "ВЫБРАТЬ
		|	СубконтоКт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|	Неопределено КАК ДанныеДокументаРасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма,
		|   Неопределено КАК Заказ
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
		
	Иначе
		
		Контрагент = ДанныеИБ.Контрагент;
		
		ТекстЗапросаРасшифровкаПлатежа = "ВЫБРАТЬ
		|	ДоговорКонтрагента КАК Договор,
		|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	Сделка КАК ДанныеДокументаРасчетов,
		|   СуммаПлатежа КАК Сумма,
		|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|   СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС,
		|   СчетНаОплату КАК Заказ
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРасчетов.Количество()>0 И 
		(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
		ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	// Сотрудник
	Если ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Сотрудник = ДанныеИБ.Контрагент;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		Для Каждого СтрокаВидаСубконто Из ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
	        Субконто    = ДанныеИБ["СубконтоКт" + СтрокаВидаСубконто.НомерСтроки];
	        Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	        	Сотрудник = Субконто;
	        	Прервать;
	        КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сотрудник", Сотрудник);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЧерезКого",     "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",            "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Руководитель",              "Руководитель", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",       "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПокупателю",    "Заказ", , "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ВидЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДатаПереходаПраваСобственности", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Неопределено);
	//ВидОперации
	ВидОперации = "РеализацияКлиенту";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		ВидОперации = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		//Если есть проведенная реализация отгруженных товаров - тогда переход права собственности произошел
		ЗапросРеализация = Новый Запрос;
		ЗапросРеализация.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Дата ИЗ Документ.РеализацияОтгруженныхТоваров
								|ГДЕ ДокументОтгрузки = &Ссылка И Проведен";
		ЗапросРеализация.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ВыборкаРеализация = ЗапросРеализация.Выполнить().Выбрать();
		Если ВыборкаРеализация.Следующий() Тогда
			ВидОперации = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
			ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", ВыборкаРеализация.Дата);
		КонецЕсли;
	
	ИначеЕсли СведенияОДоговоре.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПередачаНаКомиссию";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// Определяем налогообложение
	СуммаНДС = ДанныеИБ.Товары.Итог("СуммаНДС") + ДанныеИБ.Услуги.Итог("СуммаНДС") + ДанныеИБ.АгентскиеУслуги.Итог("СуммаНДС");
	Если СведенияОДоговоре.УчетАгентскогоНДС Тогда
		Налогообложение = "НалоговыйАгентПоНДС";
	Иначе
		СчетаДоходов = ДанныеИБ.Товары.ВыгрузитьКолонку("СчетДоходов");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДоходов, ДанныеИБ.Услуги.ВыгрузитьКолонку("СчетДоходов"));
		СчетаДоходов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаДоходов);
		
		СчетаЕНВД = БухгалтерскийУчетПовтИсп.СчетаУчетаЕНВД();
		ЕстьЕНВД = Ложь;
		Для Каждого Счет Из СчетаДоходов Цикл
			Если СчетаЕНВД.Найти(Счет) <> Неопределено Тогда
				ЕстьЕНВД = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЕНВД Тогда
			Налогообложение = "ПродажаОблагаетсяЕНВД";
		Иначе
			СтавкиНДС = ДанныеИБ.Товары.ВыгрузитьКолонку("СтавкаНДС");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.Услуги.ВыгрузитьКолонку("СтавкаНДС"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.АгентскиеУслуги.ВыгрузитьКолонку("СтавкаНДС"));
			СтавкиНДС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтавкиНДС);
			Налогообложение = "ПродажаНеОблагаетсяНДС";
			Для Каждого СтавкаНДС Из СтавкиНДС Цикл
				Если ЗначениеЗаполнено(СтавкаНДС)
					И СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					Налогообложение = "ПродажаОблагаетсяНДС";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Налогообложение", Налогообложение);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидЭлектронногоДокумента) Тогда
		// Проверим, что в формате есть нужное значение перечисления для конвертации значения ВидЭД
		// Если значение найдется - то заполним его.
		ПравилоКонвертацииЗначения = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип("ПеречислениеСсылка.ВидыЭД")));
		Если ПравилоКонвертацииЗначения.Количество() > 0
			И ПравилоКонвертацииЗначения[0].КонвертацииЗначенийПриОтправке.Получить(ДанныеИБ.ВидЭлектронногоДокумента) <> Неопределено Тогда
			ДанныеXDTO.Вставить("ВидЭД", ДанныеИБ.ВидЭлектронногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СчетУчета = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.НомерГТД.Код КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	""Собственные"" КАК ТипУслуги,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Принципал,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСПринципалом
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	РеализацияТоваровУслугАгентскиеУслуги.Содержание,
	|	""Агентские"",
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
	|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
	|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
	|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугЗачетАвансов.ДокументАванса КАК ДанныеДокументаРасчетов,
	|	РеализацияТоваровУслугЗачетАвансов.СуммаЗачета КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ЗачетАвансов КАК РеализацияТоваровУслугЗачетАвансов
	|ГДЕ
	|	РеализацияТоваровУслугЗачетАвансов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	ТаблицаАвансов = РезультатЗапроса[2].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
				И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")
				И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) Тогда
		
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ДанныеИБ.Контрагент;
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрокаРП.Депонент = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			
			ДанныеВедомостиНаВыплатуЗП = Новый Структура("Номер,Дата");
			Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаЗаработнойПлаты[0].Ведомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаДепонентов.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаДепонентов[0].Ведомость, "Дата,Номер");
			КонецЕсли;
				
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		КонецЕсли;
	Иначе // выплата по ведомостям
		
		РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
	Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
				
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Зарплата");
		ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Зарплата.Выгрузить();
		
		Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент  = Ложь;
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
			
			Если ТипЗнч(Строка.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
				НоваяСтрокаРП.Сотрудник = СтрокаВедомости.Сотрудник.ФизическоеЛицо;
				НоваяСтрокаРП.Сумма     = СтрокаВедомости.КВыплате;
			ИначеЕсли ТипЗнч(Строка.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				НоваяСтрокаРП.Сумма     = СтрокаВедомости.Сумма;
				НоваяСтрокаРП.Сотрудник = СтрокаВедомости.ФизическоеЛицо;
			КонецЕсли;
	    КонецЦикла;
	КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",     "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВал");
	
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
		ВалютаКонвертации = ДанныеИБ.СубконтоДт2.ВалютаВзаиморасчетов;
		// КурсЦБНаДатуКонвертации
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
		НоваяСтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
		НоваяСтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
		НоваяСтрокаРП.СуммаВал = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДанныеИБ.СуммаДокумента, ДанныеИБ.ВалютаДокумента, ВалютаКонвертации, ДанныеИБ.Дата);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	// ВидОперации
	ВидОперации = "Инкассация";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		ВидОперации = "Инкассация";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВидОперации = "ВзносНаличными";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// БанковскийСчет
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетОрганизации) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СчетОрганизации;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт3);
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрокаРП.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
		
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			ВыгрузитьПоСсылке(ДанныеИБ.СубконтоДт1, КомпонентыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
			ВидРасчетов = "Прочее";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
		ВидРасчетов = "КредитыИЗаймы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВидРасчетов = "Прочее" Тогда
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт1);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	РасходныйКассовыйОрдер.СчетКасса.Валютный КАК ВалютныйСчет,
				|	РасходныйКассовыйОрдер.СубконтоДт1 КАК СубконтоДт1,
				|	РасходныйКассовыйОрдер.СубконтоДт2 КАК СубконтоДт2,
				|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
				|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаВзаиморасчетов,
				|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
				|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
				|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
				|	1 КАК КурсВзаиморасчетов,
				|	1 КАК КратностьВзаиморасчетов
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ПО РасходныйКассовыйОрдер.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
				|ГДЕ
				|	РасходныйКассовыйОрдер.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		ДанныеПлатежа = ТаблицаРасчетов[0];
		Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоДт1) Тогда
			Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоДт2)
				И ТипЗнч(ДанныеПлатежа.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТаблицаРасчетов.Колонки.СубконтоДт2.Имя = "Договор";
			КонецЕсли;
			
			Если ДанныеПлатежа.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеПлатежа.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
				ДанныеПлатежа.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
				ДанныеПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СпособПогашенияЗадолженности,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
			|			ТОГДА ""Аванс""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
			|			ТОГДА ""Долг""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
			|			ТОГДА ""КраткосрочныеКредиты""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
			|			ТОГДА ""КраткосрочныеЗаймы""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
			|			ТОГДА ""ДолгосрочныеКредиты""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
			|			ТОГДА ""ДолгосрочныеЗаймы""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидРасчетовРасширенный
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
			|ГДЕ
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРасчетов.Количество() > 0 И
			(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
			ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ДатаВыписки", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Очередность", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		//В документе банковский счет физ лица и контрагент-физлицо
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
		ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка 
		|ИЗ Справочник.Контрагенты
		|ГДЕ ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ДанныеИБ.Контрагент.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("Контрагент", Выборка.Ссылка);
			Если ЗначениеЗаполнено(ДанныеИБ.СчетКонтрагента) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка 
				|ИЗ Справочник.БанковскиеСчета
				|ГДЕ Владелец = &Ссылка
				|	И НомерСчета = &НомерСчета";
				Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
				Запрос.УстановитьПараметр("НомерСчета", ДанныеИБ.СчетКонтрагента.НомерСчета);
				ВыборкаСчет = Запрос.Выполнить().Выбрать();
				Если ВыборкаСчет.Следующий() Тогда
					ДанныеXDTO.Вставить("БанковскийСчет", ВыборкаСчет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Поле "Контрагент" в документе не заполнено
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
			
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Ложь;
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		
		КонецЦикла;
		
	Иначе
		
		// Перечисление депонентов
		Если ДанныеИБ.ПеречислениеДепонентов.Количество() > 0 Тогда
			Для Каждого Строка Из ДанныеИБ.ПеречислениеДепонентов Цикл
				
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаРП.Депонент = Истина;
				
				// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
			
			КонецЦикла;
		Иначе
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗПНаЛС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеXDTO.Вставить("Сотрудник", ДанныеИБ.Контрагент);
	КонецЕсли;
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.Депонент = Ложь;
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательДаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательКБК", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательНомера", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательОснования", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательПериода", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательТипа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СтатусСоставителя", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма             = ДанныеИБ.СуммаДокумента;
	Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		СтрокаРасшифровки.СчетУчетаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом, "Код");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3")
		И ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Инструкция = Новый Структура("Значение", ДанныеИБ.ДокументОснование);
		Инструкция.Вставить("ИмяПКО", "Документ_ПлатежноеПоручение_Отправка");
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	// Контрагент.
	Контрагент = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	// Уточнение вида операции.
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
			//Прочее
			ВидПрочегоСписания = "ПрочееСписание";
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
					ВидПрочегоСписания = "ВнутренняяПередача";
			КонецЕсли;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			Если Не ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
				Или ТипЗнч(ДанныеИБ.СубконтоДт1) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ВидПрочегоСписания = "ПрочееСписание";
			КонецЕсли;
		Иначе
			ВидПрочегоСписания = "ПрочееСписание";
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	СтрокаРасшифровки.СчетУчетаРасчетов     = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	Иначе
		Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		СтатьяРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтрокаРасшифровки.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		СтрокаРасшифровки.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяРасходов) Тогда
		ВыгрузитьПоСсылке(СтрокаРасшифровки.СтатьяРасходов, КомпонентыОбмена);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям
				И Не ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ВидРасчетовСКонтрагентом = "Прочее";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПокупателем";
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
		
		Если ДанныеXDTO.Свойство("БанковскийСчет") Тогда
			// Банковский счет заполнен в ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения
			// Однако владельцем данного счета является налоговая инспекция, а не налогоплательщик.
			// В качестве контрагента для этого вида операции передается налогоплательщик, поэтому
			// владелец счета и контрагент не будут совпадать. Это не верно, поэтому счет очищаем.
			ДанныеXDTO.БанковскийСчет = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		
		Контрагент = ДанныеИБ.СубконтоДт1;
		
		ТекстЗапросаРасшифровкаПлатежа = "ВЫБРАТЬ
		|	СубконтоДт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|	Неопределено КАК ДанныеДокументаРасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.СписаниеСРасчетногоСчета
		|ГДЕ Ссылка = &Ссылка";
		
	
	Иначе
		
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Контрагент = ДанныеИБ.Налогоплательщик;
		Иначе
			Контрагент = ДанныеИБ.Контрагент;
		КонецЕсли;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	РасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|			ТОГДА ""Аванс""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
		|			ТОГДА ""Долг""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
		|			ТОГДА ""КраткосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
		|			ТОГДА ""ДолгосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРасчетов.Количество()>0 И 
		(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
		ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3")
		И ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Инструкция = Новый Структура("Значение", ДанныеИБ.ДокументОснование);
		Инструкция.Вставить("ИмяПКО", "Документ_ПлатежноеПоручение_Отправка");
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидРасчетов", , "ВидыОперацийСБДСРасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.СписаниеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостач_Отправка
Процедура ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеНедостач_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ИнвентаризацияТоваровНаСкладе", "Инвентаризация", , "Документ_ИнвентаризацияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                              "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.СписаниеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагентаРегл",   "ДоговорРегл", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",           "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",          "ТаможенныйШтраф");
	ДобавитьПКС(СвойстваШапки, "",                         "НомерДекларации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НДСВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПошлинаВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);

КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеXDTO.Договор) И ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагентаРегл) Тогда
			ДанныеXDTO.Вставить("Договор", ДанныеXDTO.ДоговорРегл);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Количество,
	|	ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|   СуммаПошлины,
	|   СуммаНДС,
	|   ДокументПартии КАК ДокументПоступления,
	|   НомерСтроки КАК НомерСтрокиДокумента,
	|   НомерРаздела КАК НомерРаздела,
	|   СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ Документ.ГТДИмпорт.Товары
	|ГДЕ Ссылка = &Ссылка
	|;
	|///////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументАванса КАК ДанныеДокументаРасчетов,
	|	СуммаЗачета КАК Сумма
	|ИЗ Документ.ГТДИмпорт.ЗачетАвансов
	|ГДЕ Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Товары = РезультатЗапроса[0].Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Разделы = ДанныеИБ.Разделы.Выгрузить();
	Разделы.Колонки.Добавить("НомерРаздела");
	Для Каждого Строка Из Разделы Цикл
		Строка.НомерРаздела = Строка.НомерСтроки;
	КонецЦикла;
	ДанныеXDTO.Вставить("Разделы", Разделы);
	
	ТаблицаАвансов = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Индекс = Товары.Количество()-1;
	Пока Индекс >=0 Цикл
		Если Товары.Получить(Индекс).Цена = 0 Тогда
			Товары.Удалить(Индекс);
		КонецЕсли;
	 	Индекс = Индекс - 1;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область ЛицензииПоставщиковАлкогольнойПродукции_Отправка
Процедура ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1, "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "", "ДатаНачала", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДатаОкончания", 1);
	ДобавитьПКС(СвойстваШапки, "", "КемВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запись = ДанныеИБ[0];
	ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", Запись.Поставщик);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", Запись.СерияНомер);
	ДанныеXDTO.Вставить("ВидЛицензии", Запись.ВидЛицензии);
	Если Запись.Период <> Дата(1900,1,1) Тогда
		ДанныеXDTO.Вставить("ДатаНачала", Запись.Период);
	КонецЕсли;
	ДанныеXDTO.Вставить("КемВыдана", Запись.КемВыдана);
	ДанныеXDTO.Вставить("ДатаОкончания", Запись.ДатаОкончания);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокДействия",             "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "СрокОплаты",               "СрокКонтроляОплатыВДнях");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",        "УчетАгентскогоНДС");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", 1, "ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ДанныеИБ.ВидДоговора);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.0.beta") Тогда
		Если СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 50 Тогда
			ДанныеXDTO.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 50);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1,"Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
	ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидДокумента");
	Записи.Колонки.Добавить("Период");
	Записи.Колонки.Добавить("Серия");
	Записи.Колонки.Добавить("Номер");
	Записи.Колонки.Добавить("ДатаВыдачи");
	Записи.Колонки.Добавить("КемВыдан");
	Записи.Колонки.Добавить("КодПодразделения");
	Записи.Колонки.Добавить("СрокДействия");
	Записи.Колонки.Добавить("Представление");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДокументУдостоверяющийЛичность", "ДокументУдЛичность");
	ДобавитьПКС(СвойстваШапки, "КПП",                            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",             "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение",      "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",           "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",      "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                               "ГоловнойКонтрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                               "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "СтранаРегистрации", 1, "Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИНН", "");
	Если ДанныеИБ.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИНН", ДанныеИБ.ИНН);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		Если ДанныеИБ.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("СтранаРегистрации", ДанныеИБ.СтранаРегистрации);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("СтранаРегистрации", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтранаРегистрации = Неопределено;
	Если ДанныеИБ.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		СтранаРегистрации = ДанныеИБ.СтранаРегистрации;
		ДанныеXDTO.Вставить("НалоговыйНомерНерезидента", ДанныеИБ.ИНН);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ДанныеXDTO.Вставить("СтранаРегистрации", СтранаРегистрации);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",                          "Артикул");
	ДобавитьПКС(СвойстваШапки, "Код",                              "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                      "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",               "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НоменклатурнаяГруппа",             "ГруппаАналитическогоУчета", , "Справочник_НоменклатурнаяГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяСпецификацияНоменклатуры", "ОсновнаяСпецификацияНоменклатуры", , "Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                         "Группа", , "Справочник_НоменклатураГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                        "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",              "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "АлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидАлкогольнойПродукции", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "ИмпортнаяАлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ОбъемДАЛ", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ПроизводительИмпортер", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                 "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
	КонецЕсли;
		
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Услуга Тогда 
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
		Иначе
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
		КонецЕсли;
		
		//Код ТНВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодТНВЭД) Тогда
			
			ДанныеXDTO.Вставить("КодТНВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКВЭД)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКВЭД) Тогда
			
			ДанныеXDTO.Вставить("КодОКВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКП
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКП)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКП) Тогда
			
			ДанныеXDTO.Вставить("КодОКП", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКП, "Код, Наименование"));
		КонецЕсли;
	Иначе	
		ДанныеXDTO.Вставить("ТипНоменклатуры", "");
		ДанныеXDTO.Вставить("НаименованиеПолное", "");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	#Область ДанныеАлкогольнойПродукции
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК АлкогольнаяПродукция,
		|	ВЫБОР КОГДА Таб.НаименованиеВида169 = """" ТОГДА
		|		НаименованиеВида129
		|	ИНАЧЕ Таб.НаименованиеВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Наименование,
		|	ВЫБОР КОГДА Таб.КодВида169 = """" ТОГДА
		|		КодВида129
		|	ИНАЧЕ Таб.КодВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Код,
		|	ВЫБОР КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво) ТОГДА
		|		""Пиво""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция) ТОГДА
		|		""АлкогольнаяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяПищеваяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяНеПищеваяПродукция""
		|	КОНЕЦ КАК ВидАлкогольнойПродукции_ВидЛицензии,
		|	ВЫБОР
		|		КОГДА Спр.Импортер <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмпортнаяАлкогольнаяПродукция,
		|	Таб.КоэффПересчетаДал КАК ОбъемДАЛ,
		|	ВЫБОР
		|		КОГДА НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Спр.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА Спр.Производитель
		|					ИНАЧЕ Спр.Импортер
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК ПроизводительИмпортер
		|ИЗ
		|	Справочник.Номенклатура КАК Спр
		|		СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК Таб
		|		ПО Спр.Ссылка = Таб.Номенклатура
		|ГДЕ
		|	Спр.Ссылка = &Ссылка И Таб.Номенклатура is not null");
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ПроизводительИмпортер");
	ДанныеXDTO.Вставить("ОбъемДАЛ");
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции");
	Если Выборка.Следующий() И Выборка.АлкогольнаяПродукция Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, Выборка);
		ДанныеВидАК = Новый Структура("Код, Наименование, ВидЛицензии",
					Выборка.ВидАлкогольнойПродукции_Код,
					Выборка.ВидАлкогольнойПродукции_Наименование,
					Выборка.ВидАлкогольнойПродукции_ВидЛицензии);
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", ДанныеВидАК);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппыГруппа");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",           "ГоловнаяОрганизация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",       "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",     "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "",                              "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	КодОКАТО = "";
	Если ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
		КодОКАТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО");
	КонецЕсли;
	ДанныеXDTO.Вставить("ОКАТО", КодОКАТО);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", ,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                 "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",                "ТипСклада", , "ТипыСкладов");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли",  "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "",                         "МОЛ", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеXDTO.Вставить("МОЛ", ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(ДанныеИБ.Ссылка, ТекущаяДатаСеанса()));
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Количество",   "Количество");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "Группа", 1, "Справочник_СпецификацииНоменклатурыГруппа_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Спецификация", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	|	ИсходныеКомплектующие.Количество КАК Количество,
	|	1 КАК ДоляСтоимости
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК ИсходныеКомплектующие
	|ГДЕ
	|	ИсходныеКомплектующие.Ссылка = &Спецификация";
	
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", ДанныеИБ.Родитель);	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатурыГруппа_Отправка
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатурыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатурыГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГруппа_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиДоходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", ,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРегистрации",       "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",          "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",         "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСлужебное", "НаименованиеСлужебное");
	ДобавитьПКС(СвойстваШапки, "Пол",                   "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР",     "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "УточнениеНаименования", "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "",                      "ФИО", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.ФИО);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "НоменклатураОтбор", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ШтрихкодОтбор", ДанныеИБ.Отбор.Штрихкод.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("Номенклатура");
	Записи.Колонки.Добавить("Штрихкод");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		СтрокаЗаписи.Штрихкод = СтрокаНабора.Штрихкод;
		СтрокаЗаписи.Номенклатура = СтрокаНабора.Номенклатура;
		ДанныеXDTO.Вставить("НоменклатураОтбор", СтрокаНабора.Номенклатура);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область АннулированиеПодарочныхСертификатов_Получение
Процедура ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "АннулированиеПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",          "СтатьяДоходов", , "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",          "", 1);
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаКтЗадолженности", "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКт",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КредиторскаяЗадолженность", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);

КонецПроцедуры

Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ПодарочныеСертификаты Цикл
			СуммаВсего = СуммаВсего + Строка.Сумма;
		КонецЦикла;
		ПолученныеДанные.СуммаКтЗадолженности = СуммаВсего;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	 КонецЕсли;
КонецПроцедуры

Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту
Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаКтЗадолженности", "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",          "", 1);
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",          "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт2",          "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "СчетКт",               "", 1);

КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокЗадолженность = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		ЕстьКолонкаЭквайрер = ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("Эквайрер") <> Неопределено;
	
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СуммаВсего = СуммаВсего + Строка.СуммаОплаты;
			Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СубконтоКт1") 
				И ЕстьКолонкаЭквайрер
				И ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку");
				ПолученныеДанные.СубконтоКт1 = Контрагент.Ссылка;
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, Контрагент.Ссылка);
				ПолученныеДанные.СубконтоКт2 = ДоговорКонтрагента.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		
			
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
	 КонецЕсли;
КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	Для Каждого СтрокаЗадолженность ИЗ ПолученныеДанные.КредиторскаяЗадолженность Цикл
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	Конеццикла;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ВозвратПодарочныхСертификатов_ВозвратНаличными
Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВозвратПодарочныхСертификатов_ВозвратНаличными";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",            "", 1);

КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурса.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	СтрокаРасшифровка.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",     "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",         "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",         "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                  "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыданныеАвансы",    "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПоставщикам", "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",           "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",                   "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности", "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Прочее",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодразделениеЗатрат",     "", 1,"Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Субконто1",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто2",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто3",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ1",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ2",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ3",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",     "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("ПодразделениеЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.ПодразделениеЗатрат) Тогда
				ДобавитьОрганизациюВПодразделениеXDTO(СтруктураДанныхСтроки.ПодразделениеЗатрат, ДанныеXDTO.КлючевыеСвойства.Организация);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
	
				СчетЗатрат = СчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
					
					Если ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
						ЗаполнитьСтатьюЗатратВСубконтоСтроки(СтруктураДанныхСтроки, СчетЗатрат, Строка.СтатьяЗатрат);
					КонецЕсли;
			    КонецЕсли;
			КонецЕсли; 
			
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
			
		Для Каждого Строка Из ДанныеXDTO.ОплатаПоставщикам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически);
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаКонтрагентам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаКонтрагентам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СпособПогашенияЗадолженности) Тогда
				СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности", Перечисления.СпособыПогашенияЗадолженности.Автоматически);		
			ИначеЕсли ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ИмяПКО = ИмяПКОПоXDTOДокументаРасчетов(Строка.ДокументРасчетов);
				Инструкция = Новый Структура("Значение", Строка.ДокументРасчетов); 
				Если ИмяПКО <> Неопределено Тогда
					Инструкция.Вставить("ИмяПКО", ИмяПКО);
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить(
					"Сделка", Инструкция);
			КонецЕсли;
					 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура();
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"ДокументАванса", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
				ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", ВидДокВходящий, СпособПогашенияЗадолженности, Сделка";
			КонецЕсли;
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				ВосстанавливаемыеПоля);
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("НомерГТД");
			МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетУчета,СчетУчетаНДС, ОтражениеВУСН, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
	
			Если ДанныеИБ.Проведен Тогда
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, ОтражениеВУСН, СчетУчетаНДС, ПодразделениеЗатрат, БланкСтрогойОтчетности";
			Иначе
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, ОтражениеВУСН, СчетУчетаНДС, БланкСтрогойОтчетности";
			КонецЕсли;
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				ЗаполняемыеРеквизиты);
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		Для Каждого Строка Из ДанныеИБ.Прочее Цикл
			Если Не ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				Строка.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СчетЗатратНУ) Тогда
				Строка.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			КонецЕсли;		
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение_ПоляПоиска
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение_ПоляПоиска";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",     "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",         "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",         "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                  "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыданныеАвансы",    "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПоставщикам", "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",           "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",                   "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности", "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Прочее",            "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодразделениеЗатрат",     "ПодразделениеЗатрат", 1,"Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Субконто1",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто2",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто3",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ1",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ2",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ3",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",     "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Номер,ВалютаДокумента,ФизЛицо");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("ПодразделениеЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.ПодразделениеЗатрат) Тогда
				ДобавитьОрганизациюВПодразделениеXDTO(СтруктураДанныхСтроки.ПодразделениеЗатрат, ДанныеXDTO.КлючевыеСвойства.Организация);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = СчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
					
					Если ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
						ЗаполнитьСтатьюЗатратВСубконтоСтроки(СтруктураДанныхСтроки, СчетЗатрат, Строка.СтатьяЗатрат);
					КонецЕсли;
			    КонецЕсли;
			КонецЕсли; 
			
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПоставщикам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически);
					 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаКонтрагентам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаКонтрагентам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СпособПогашенияЗадолженности) Тогда
				СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности", Перечисления.СпособыПогашенияЗадолженности.Автоматически);		
			ИначеЕсли ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ИмяПКО = ИмяПКОПоXDTOДокументаРасчетов(Строка.ДокументРасчетов);
				Инструкция = Новый Структура("Значение", Строка.ДокументРасчетов); 
				Если ИмяПКО <> Неопределено Тогда
					Инструкция.Вставить("ИмяПКО", ИмяПКО);
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить(
					"Сделка", Инструкция);
			КонецЕсли;
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура();
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"ДокументАванса", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
			
			ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
				ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", ВидДокВходящий, СпособПогашенияЗадолженности, Сделка";
			КонецЕсли;
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				ВосстанавливаемыеПоля);
				
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("НомерГТД");
			МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетУчета,СчетУчетаНДС, ОтражениеВУСН, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			Если ДанныеИБ.Проведен Тогда
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, ОтражениеВУСН, СчетУчетаНДС, ПодразделениеЗатрат, БланкСтрогойОтчетности";
			Иначе
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, ОтражениеВУСН, СчетУчетаНДС, БланкСтрогойОтчетности";
			КонецЕсли;
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				ЗаполняемыеРеквизиты);
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		Для Каждого Строка Из ДанныеИБ.Прочее Цикл
			Если Не ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				Строка.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СчетЗатратНУ) Тогда
				Строка.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			КонецЕсли;		
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзПроизводства_Получение
Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратныеОтходы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "В");
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеЗатрат");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратныеОтходы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
			ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратныеОтходы,
		ДанныеИБ.ВозвратныеОтходы,
		МассивКлючевыхПолей,
		"Цена, Сумма, Счет, СтатьяЗатрат, ОтражениеВУСН, НоменклатурнаяГруппа");
	ДанныеИБ.ВозвратныеОтходы.Загрузить(ПолученныеДанные.ВозвратныеОтходы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзЭксплуатации_Получение
Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратМатериаловИзЭксплуатации;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецодежда",   "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",                       "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецоснастка", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			
			ИмяТабличнойЧасти = "Спецодежда";
			Если ЗначениеЗаполнено(СтрокаXDTO.Номенклатура) Тогда
				// Получим номенклатуру
				ИмяПКО = "Справочник_Номенклатура_Получение";
				ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Номенклатура,
												ПКОНоменклатура, "ПолучитьСсылку");
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
					ПолученныеДанные.Организация, Номенклатура, ПолученныеДанные.Склад, ПолученныеДанные.Дата);
				Если СчетаУчета <> Неопределено Тогда
					Если СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
						ИмяТабличнойЧасти = "Спецоснастка";
					КонецЕсли; 
				КонецЕсли;
									
			КонецЕсли;
	
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяДавальцу_Получение
Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                   "", 1, "Документ_ПоступлениеСырьяОтДавальца_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Сделка = Неопределено;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчета = СчетПоКоду(Строка.СчетУчета);
				Если ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",   СчетУчета);
			    КонецЕсли;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
			Если Сделка = Неопределено
				И ЗначениеЗаполнено(Строка.ДокументПоступления)
				И Строка.ДокументПоступления.ТипЗначения = "ПоступлениеСырьяОтДавальца" Тогда
				
				Сделка = Строка.ДокументПоступления;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сделка) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Сделка", Новый Структура("Значение, ИмяПКО", Сделка, "Документ_ПоступлениеСырьяОтДавальца_Получение"));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяОтПереработчика_Получение
Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара",        "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвращенныеМатериалы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Функция НайтиСоздатьНазначениеИспользованияСпецодежды(КомпонентыОбмена, Номенклатура, СрокЭксплуатации,
НаименованиеНазначенияИспользования, СпособПогашенияСтоимостиТМЦXDTO, СпособОтраженияРасходов)
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ Справочник.НазначенияИспользования
	|ГДЕ Владелец = &Номенклатура И СрокПолезногоИспользования = &СрокЭксплуатации
	|	И (Наименование = &НаименованиеНазначения ИЛИ &НаименованиеНазначения = """")";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СрокЭксплуатации", СрокЭксплуатации);
	Запрос.УстановитьПараметр("НаименованиеНазначения", СокрЛП(НаименованиеНазначенияИспользования));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НазначениеИспользованияОбъект = Справочники.НазначенияИспользования.СоздатьЭлемент();
	НазначениеИспользованияОбъект.Владелец = Номенклатура;
	НазначениеИспользованияОбъект.Наименование = НаименованиеНазначенияИспользования;
	НазначениеИспользованияОбъект.Количество = 1;
	назначениеИспользованияОбъект.СрокПолезногоИспользования = СрокЭксплуатации;
	Если ЗначениеЗаполнено(СпособПогашенияСтоимостиТМЦXDTO) Тогда
		ПКПД_СпособПогашенияСтоимостиТМЦ = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СпособыПогашенияСтоимости", "ИмяПКПД");
		НазначениеИспользованияОбъект.СпособПогашенияСтоимости = ПКПД_СпособПогашенияСтоимостиТМЦ.КонвертацииЗначенийПриПолучении.Получить(СпособПогашенияСтоимостиТМЦXDTO.Значение);
	Иначе
		Если СрокЭксплуатации < 12 Тогда
			НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
		Иначе
			НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.Линейный;
		КонецЕсли;
	КонецЕсли;
	НазначениеИспользованияОбъект.СпособОтраженияРасходов = СпособОтраженияРасходов;
	НазначениеИспользованияОбъект.Записать();
	//Возврат НазначениеИспользованияОбъект.Ссылка;
КонецФункции
Функция НайтиСоздатьРегистрациюВНалоговомОргане(КПП, ОКАТО, Владелец, ВыполнятьПоиск = Истина)
	РегистрацияНО = Неопределено;
	СоздаватьЗаписьРегистра = Истина;
	Если ВыполнятьПоиск Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Спр.Ссылка,
		|	ВЫБОР КОГДА ИсторияРегистраций.РегистрацияВНалоговомОргане ЕСТЬ NULL Тогда Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК СоздаватьЗаписьРегистра
		|ИЗ Справочник.РегистрацииВНалоговомОргане КАК Спр
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(, СтруктурнаяЕдиница = &Владелец) КАК ИсторияРегистраций
		|	ПО Спр.Ссылка = ИсторияРегистраций.РегистрацияВНалоговомОргане
		|ГДЕ Спр.Владелец = &Владелец
		|	И Спр.ПометкаУдаления = Ложь
		|	И Спр.КодПоОКАТО = &ОКАТО
		|	И Спр.Код = &Код
		|	И Спр.КПП = &КПП";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ОКАТО", ОКАТО);
		Запрос.УстановитьПараметр("КПП", КПП);
		Запрос.УстановитьПараметр("Код", Лев(КПП, 4));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегистрацияНО = Выборка.Ссылка;
			СоздаватьЗаписьРегистра = Выборка.СоздаватьЗаписьРегистра;
		КонецЕсли;
	КонецЕсли;
	Если РегистрацияНО = Неопределено Тогда
		СправочникОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		СправочникОбъект.Владелец = Владелец;
		СправочникОбъект.КПП = КПП;
		СправочникОбъект.Код = Лев(КПП, 4);
		СправочникОбъект.КодПоОКАТО = ОКАТО;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		РегистрацияНО = СправочникОбъект.Ссылка;
	КонецЕсли;
	Если СоздаватьЗаписьРегистра Тогда
		НовЗапись = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьМенеджерЗаписи();
		НовЗапись.СтруктурнаяЕдиница = Владелец;
		НовЗапись.РегистрацияВНалоговомОргане = РегистрацияНО;
		НовЗапись.Период = ТекущаяДатаСеанса();
		НовЗапись.Записать();
	КонецЕсли;
	//Возврат РегистрацияНО;
КонецФункции
Процедура ОбновитьСтатусыДокументов(КомпонентыОбмена)
	СтатусыДокументовКЗагрузке = КомпонентыОбмена.ПараметрыКонвертации.СтатусыДокументовКЗагрузке;
	Если ЗначениеЗаполнено(СтатусыДокументовКЗагрузке) Тогда
		Для Каждого СтатусыДокумента Из СтатусыДокументовКЗагрузке Цикл
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(
				СтатусыДокумента.Документ, СтатусыДокумента.Статус, СтатусыДокумента.ДополнительныйСтатус, Неопределено);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ)
	Если ПолученныеДанные.Организация <> ДанныеИБ.Организация
		И ПолученныеДанные.Контрагент <> ДанныеИБ.Контрагент
		И ПолученныеДанные.ДоговорКонтрагента <> ДанныеИБ.ДоговорКонтрагента Тогда
		
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоАвансам = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоПретензиям") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоПретензиям = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоТаре") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоТаре = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОпределитьСтавкуНДС_Отправка(ТабличнаяЧасть, НДСПоСтавкам2и4)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Строка.СтавкаНДССтрокой = "НДС0";
		ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Строка.СтавкаНДССтрокой = "БезНДС";
		Иначе
			Если НДСПоСтавкам2и4 Тогда
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Строка.СтавкаНДССтрокой = "НДС4";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Строка.СтавкаНДССтрокой = "НДС4_104";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС2";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС2_102";
				КонецЕсли;
			Иначе
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Строка.СтавкаНДССтрокой = "НДС18";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Строка.СтавкаНДССтрокой = "НДС18_118";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС10";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС10_110";
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры
Функция ОпределитьТипЗапасовПоСчетуУчета(СчетУчета)
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат "СобственныеТовары";
	КонецЕсли;
		
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах Или СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле Тогда
		Возврат "СобственныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные
		Или  СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости Тогда
		
		Возврат "КомиссионныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.Тара Или СчетУчета = ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя Тогда
		Возврат "ВозвратнаяТара";
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) Тогда
		Если СчетУчета = ПланыСчетов.Хозрасчетный.Тара Тогда
			Возврат "ПрочиеМатериалы";
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			Возврат "СырьеИМатериалы";
		ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации) Тогда
			Возврат "СпецоснасткаИСпецодеждаНаСкладе";
		ИначеЕсли СчетУчета.Предопределенный Тогда
			//Все остальные предопределенные субсчета 10-го счета соответствуют именам типов запасов
			Возврат СчетУчета.ИмяПредопределенныхДанных;	
		КонецЕсли;
	КонецЕсли;
	Возврат "СобственныеТовары";
КонецФункции
Процедура ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, ПараметрыКонвертации);
	
	// Статья прочих доходов/расходов
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяПрочихДоходовРасходов) Тогда
		Если ЗначениеЗаполнено(ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда 
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров;
		Иначе
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ОприходованиеИзлишков");
		КонецЕсли;
	КонецЕсли;
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Неопределено;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
		ЗначенияЗаполнения.Вставить("Организация", ГоловнаяОрганизация);
		ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
		Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыСозданияДоговора = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Возврат СоздатьОсновнойДоговорКонтрагента(ПараметрыСозданияДоговора);
			
	КонецЕсли;
КонецФункции
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаОплата ИЗ Объект.ОплатаПоставщикам Цикл
		Если ЗначениеЗаполнено(СтрокаОплата.СчетУчетаРасчетовПоАвансам) И
			ЗначениеЗаполнено(СтрокаОплата.СчетУчетаРасчетовСКонтрагентом) Тогда
			Продолжить;
		КонецЕсли;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, СтрокаОплата.Контрагент, СтрокаОплата.ДоговорКонтрагента);
		
		Если НЕ ЗначениеЗаполнено(СтрокаОплата.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаОплата.СчетУчетаРасчетовПоАвансам   = СчетаУчета.СчетАвансов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОплата.СчетУчетаРасчетовСКонтрагентом) Тогда 
			ВидДоговора	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОплата.ДоговорКонтрагента, "ВидДоговора");
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
				СтрокаОплата.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
			Иначе
				СтрокаОплата.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ПодразделениеОрганизации");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчета) И ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли;
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			СтрокаНоменклатура.Номенклатура, ДанныеОбъекта);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчета) И ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаНоменклатура.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчетаНДС) И ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДС) Тогда
			СтрокаНоменклатура.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Прочее Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.СчетЗатрат) Тогда
			СтрокаНоменклатура.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.СчетЗатратНУ) Тогда
			СтрокаНоменклатура.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчетаНДС) И ЗначениеЗаполнено(СтрокаНоменклатура.СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчетаНДС) Тогда
				СтрокаНоменклатура.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			СтрокаНоменклатура.Номенклатура, ДанныеОбъекта);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.СчетЗатрат) И ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
			СтрокаНоменклатура.СчетЗатрат = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура.СчетУчетаНДС) И ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДС) Тогда
			СтрокаНоменклатура.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВыпускПродукции(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	ДанныеОбъекта = Новый Структура("Дата,Организация,Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);	
	
	ОсновнаяСтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению("СписаниеМатериалов"); 
	
	Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.Спецификация)  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
					СтрокаТаблицы.ПлановаяСтоимость = СведенияОНоменклатуре.ПлановаяСтоимость;
				КонецЕсли;
				СтрокаТаблицы.СуммаПлановая = СтрокаТаблицы.ПлановаяСтоимость * СтрокаТаблицы.Количество;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Спецификация) Тогда
				СтрокаТаблицы.Спецификация = СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СведенияОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ВозвратныеОтходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) ИЛИ
			СтрокаТаблицы.Сумма = 0  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
				СтрокаТаблицы.Цена		= СведенияОНоменклатуре.ПлановаяСтоимость;
				СтрокаТаблицы.Сумма		= СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентов(Объект, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Объект.Ссылка) <> Неопределено Тогда
		// Выполняем обработчик заполнения объекта для новых договоров.
		ЗаполнитьДоговорДаннымиЗаполнения(Объект, Неопределено);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух(Объект, ПараметрыКонвертации)
	Если ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		Для Каждого Движение Из Объект.Движения Цикл
				
			Движение.Прочитать();
			ЕстьИзменения = Ложь;
			Для Каждого Строка Из Движение Цикл
				
				Если Строка.Активность = Ложь Тогда
					Строка.Активность = Истина;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				Движение.Записывать = Истина;
				Движение.Записать();
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена)
	МассивТНВЭД = КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД;
	
	Если МассивТНВЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлассификатора = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторТНВЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|	И КлассификаторТНВЭД.Ссылка В(&МассивТНВЭД)";
	
	Запрос.УстановитьПараметр("МассивТНВЭД", МассивТНВЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
			ПараметрыОтбора = Новый Структура("Код", СправочникОбъект.Код);
			НайденныеСтроки = ТаблицаКлассификатора.НайтиСтроки(ПараметрыОтбора);
		
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Элемент справочника не найден в актуальном классификаторе ТНВЭД,
				// установим килограмм.
				СправочникОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166");
			Иначе
				СправочникОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(
					НайденныеСтроки[0].ЕдиницаИзмерения);
			КонецЕсли;
		
			СправочникОбъект.Записать();
		Исключение
				
		КонецПопытки
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаДолга(Объект)
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.ДебиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансов;
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.КредиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
					
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	//При необходимости заполнение счета списания задолженности
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности  Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетДт) Тогда
			Объект.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетКт) Тогда
			Объект.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаПоступления(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	ПрименяетсяОсобыйПорядокНалогообложения
		= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
				СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
	
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету; 
			КонецЕсли;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И 
			СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			СтрокаТаблицы.СчетЗатрат = СтрокаСведенийОНоменклатуре.СчетРасходов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
			СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураПолученный.Ссылка.НомерИсправления КАК НомерИсправления,
			|	СчетФактураПолученный.Ссылка.ДатаИсправления КАК ДатаИсправления
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
			|	И СчетФактураПолученный.Ссылка.ПометкаУдаления = ЛОЖЬ
			|УПОРЯДОЧИТЬ ПО	
			|	НомерИсправления";
	
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка, "НомерИсправления, ДатаИсправления");
		Иначе		
			Объект.НомерИсправления = 0;
			Объект.ДатаИсправления  = Объект.Дата;
		КонецЕсли;
	
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаРеализации(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		Объект.ИсходныйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
			Объект.ДокументРеализации, Истина);
	КонецЕсли;
	
	// Заполним свойства строк с ЕстьВДокументеРеализации из документа реализации
	ДанныеЗаполнения = Документы.КорректировкаРеализации.ДанныеЗаполненияПоДокументу(Объект.ДокументРеализации);
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения";
		ПоляДляЗаполнения = "СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Товары", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения";
		ПоляДляЗаполнения = "СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Услуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения, Контрагент, ДоговорКонтрагента";
		ПоляДляЗаполнения = "СчетРасчетов";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "АгентскиеУслуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
	
	// Заполняем номер исправления
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
			Объект.ДокументРеализации, Ложь);
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураВыданный.Ссылка.НомерИсправления КАК НомерИсправления
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Объект.НомерИсправления = ?(Выборка.Следующий(), Выборка.НомерИсправления, 0);
		
		Если Объект.НомерИсправления = 0 Тогда
			ПараметрыДокументаИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
				Объект.ВидОперации, Объект.ДокументРеализации, ИсправляемыйДокументРеализации);
			Объект.НомерИсправления = ПараметрыДокументаИсправления.НомерИсправления;
		КонецЕсли; 
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.ИсправляемыйДокумент = ИсправляемыйДокументРеализации;
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Объект.ВидНоменклатуры = ВидНоменклатурыПоГруппе(Объект.Родитель, Объект.Услуга);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_НоменклатураГруппа(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И ЗначениеЗаполнено(Объект.Родитель) Тогда
		Объект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "ВидНоменклатуры");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП(Объект)
	//Заполнение счетов расчетов
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам =     СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОприходованиеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Коэффициент = 1;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
	
	//Для организаций - ИП
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) 
		И Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.ФизическиеЛица
		|ГДЕ Наименование = &Наименование И ИНН = &ИНН И НЕ ПометкаУдаления";
		Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
		Запрос.УстановитьПараметр("ИНН", Объект.ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФизЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФизЛицоОбъект.КонтактнаяИнформация.Очистить();
		Иначе
			//Создаем физическое лицо
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.Наименование = Объект.Наименование;
			ФизЛицоОбъект.ФИО = Объект.Наименование;
			ФизЛицоОбъект.Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ФизЛицоОбъект.ИНН = Объект.ИНН;
		КонецЕсли;
		Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
			Для Каждого СтрокаКонтакт ИЗ Объект.КонтактнаяИнформация Цикл
				ВидКИФизЛицо = Неопределено;
				Если СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
				Иначе
					Продолжить;
				КонецЕсли;
				СтрокаКонтактНов = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактНов, СтрокаКонтакт,,"Вид");
				СтрокаКонтактНов.Вид = ВидКИФизЛицо;
			КонецЦикла;
		КонецЕсли;
		ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		ФизЛицоОбъект.Записать();
		Объект.ИндивидуальныйПредприниматель = ФизЛицоОбъект.Ссылка;
	
	КонецЕсли
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДС)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Истина, Объект);
	
	КонецЕсли;
	
	ТабСчетовДоЗаполнения = Объект.Товары.Выгрузить(,"СчетУчета,СчетДоходов,СчетУчетаНДСПоРеализации, СчетРасходов");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаДоЗаполнения = ТабСчетовДоЗаполнения[СтрокаТаблицы.НомерСтроки - 1];
		
		Если ЗначениеЗаполнено(СтрокаДоЗаполнения.СчетУчета) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДоЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		Объект.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	КонецЕсли;
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомитентуОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) И НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
			Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
			Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
			
			НоменклатурнаяГруппаВознаграждения = СведенияОНоменклатуре.НоменклатурнаяГруппа;
			
			Если ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
				Объект.Субконто = Неопределено;
				ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
				Если ДанныеСчета.КоличествоСубконто >= 1 Тогда
					ЗначениеСубконто = ДанныеСчета["ВидСубконто1ТипЗначения"].ПривестиЗначение(Объект.Субконто);
					Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Объект.Субконто = НоменклатурнаяГруппаВознаграждения;
					Иначе
						Объект.Субконто = ЗначениеСубконто;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации)
		И Объект.Товары.Итог("СуммаНДСВознаграждения") <> 0 Тогда
		Объект.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетОРозничныхПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	АТТПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ДанныеОбъекта.Вставить("АТТПоПродажнойСтоимости", АТТПоПродажнойСтоимости);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
				СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТаблицы, "Товары", СведенияОНоменклатуре);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто) Тогда
			СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
			
			Если СвойстваСчетаДоходов.ВидСубконто1 = ВидСубконтоНоменклатурныеГруппы Тогда
				СтрокаТаблицы.Субконто = ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	
	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетов)
			И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			
			ПараметрыОбъекта = Новый Структура("Организация");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(ПараметрыОбъекта, СтрокаТаблицы);
	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаМатериаловВПереработку(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовПоТаре = СтруктураСчетов.СчетУчетаТарыПокупателя;
		КонецЕсли;
	КонецЕсли;
	
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			СтрокаТаблицы.СчетПередачи = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
		КонецЕсли;
	КонецЦикла;
	
	
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Объект.Местонахождение = Объект.ПодразделениеОрганизации;
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИнвентарьИХозяйственныеПринадлежности");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО_Расчеты(Объект)
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ПорядокОтраженияАванса) Тогда
			СтрокаРасшифровки.ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(Объект.Организация, Объект.Дата);	
		КонецЕсли;
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента)
			Или Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
		Иначе
	
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДенежныхСредств(Объект)
	ЗаполнитьСчетаУчета(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = БанковскийСчетСписанияПриПереводеДенежныхСредств(Объект);
		КонецЕсли;
	КонецЕсли;
	
	УчетУСН.ЗаполнитьПоступлениеНаРасчетныйСчет(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДопРасходов(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	
	//Заполним табличную часть "Товары"
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ПрименяетсяУСН
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение счетов учета номенклатуры
		Склад = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", СтрокаТаблицы.ДокументПартии.Метаданные()) Тогда
			Склад = СтрокаТаблицы.ДокументПартии.Склад;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация, СтрокаТаблицы.Номенклатура, Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
			СтрокаТаблицы.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(Объект)
	ПрименениеУСН                           = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ПорядокОтраженияАванса) Тогда
			СтрокаРасшифровки.ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(Объект.Организация, Объект.Дата);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = ПоступлениеНаРасчетныйСчетФормы.СтавкаНДСРасшифровкиПлатежа(Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеОтПереработчика(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация, 
																						Объект.Контрагент, 
																						Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТары;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.Продукция.ВыгрузитьКолонку("Номенклатура");
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта);
		
		Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				И ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				СтрокаТаблицы.Счет = СтрокаСведенийОНоменклатуре.СчетаУчета.СчетУчета;
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
				СтрокаТаблицы.ПлановаяСтоимость = СтрокаСведенийОНоменклатуре.ПлановаяСтоимость;
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ВозвращенныеМатериалы.ВыгрузитьКолонку("Номенклатура");
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.ВозвращенныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета =
					БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				СтрокаТаблицы.СчетПередачи = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ИспользованныеМатериалы.ВыгрузитьКолонку("Номенклатура");
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта);
			
		Для Каждого СтрокаТаблицы Из Объект.ИспользованныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
				И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(
												СтрокаСведенийОНоменклатуре.СчетаУчета.СчетПередачи);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				СтрокаТаблицы.СтатьяЗатрат = ?(ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.СтатьяЗатрат), 
																		СтрокаСведенийОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта);
			
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) 
				И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
				И СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СтатьяЗатрат = ?(ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.СтатьяЗатрат),
												СтрокаСведенийОНоменклатуре.СтатьяЗатрат,
												ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПТиУ(Объект, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
		
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СпособОценкиТоваровВРознице      = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах              = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если УчетВПродажныхЦенах Тогда
		
		ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ДанныеСклада.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
			И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
			И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
				ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
				
			Если РазделениеПоСтавкамВРознице И ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					СтрокаТаблицы.СтавкаНДСВРознице = СтрокаТаблицы.СтавкаНДС;
				КонецЦикла
			КонецЕсли;
			
			// Если ЦенаВРознице не передано - необходимо заполнение
			Если Объект.Товары.Итог("ЦенаВРознице") = 0 Тогда
			
				СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
				ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ДанныеСклада.ТипЦенРозничнойТорговли, Объект.Дата);
				ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					ЦенаВРознице = 0;
					НайденнаяСтрока = ТаблицаЦенВРознице.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						
						СтрокаТаблицы.ЦенаВРознице = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
							НайденнаяСтрока.Цена,
							НайденнаяСтрока.Валюта, ВалютаРеглУчета,
							НайденнаяСтрока.Курс, 1,
							НайденнаяСтрока.Кратность, 1);
						СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.ЦенаВРознице * СтрокаТаблицы.Количество;
					КонецЕсли;
						
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//Сохраним номенклатурные группы услуг
	КэшАналитики = Новый Соответствие();
	Если Объект.Услуги.Количество() > 0 Тогда
		Для каждого СтрокаУслуги ИЗ Объект.Услуги Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаУслуги.СчетЗатрат)
				И ЗначениеЗаполнено(СтрокаУслуги.Субконто1) Тогда
				КэшАналитики.Вставить(СтрокаУслуги.НомерСтроки, СтрокаУслуги.Субконто1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	//Восстановим НоменклатурныеГрупы, они передаются как субконто1
	Для каждого СтрокаКэша Из КэшАналитики Цикл
		СтрокаТабличнойЧасти = Объект.Услуги[СтрокаКэша.Ключ-1];
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Субконто1) Тогда
			СтрокаТабличнойЧасти.Субконто1 = СтрокаКэша.Значение;
			СтрокаТабличнойЧасти.СубконтоНУ1 = СтрокаКэша.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем остальные незаполненные данные
	
	Если Объект.Товары.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Товары);
	КонецЕсли;
	
	Если Объект.Услуги.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Услуги);
	КонецЕсли;
	
	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		И Объект.ВозвратнаяТара.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() > 0 
			И Объект.Услуги.Количество() = 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли Объект.Товары.Количество() = 0 
			И Объект.Услуги.Количество() > 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		// Заполняем счета учета
		Документы.РеализацияОтгруженныхТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияУслугПоПереработке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			Объект.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЕсли;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры, Объект.МатериалыЗаказчика.ВыгрузитьКолонку("Номенклатура"), Истина);
	ПрименяетсяОсобыйПорядокНалогообложения
					= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
					
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
					
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
	
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов = СтрокаСведенийОНоменклатуре.СчетДоходов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто)
			И СтрокаСведенийОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.Субконто) Тогда
			
			СтрокаТаблицы.Субконто = СтрокаСведенийОНоменклатуре.Субконто;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто)
			И СтрокаСведенийОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
				И ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТаблицы.Субконто =
					СтрокаСведенийОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТаблицы.Субконто);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СтрокаСведенийОНоменклатуре.СчетРасходов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СтрокаСведенийОНоменклатуре.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.МатериалыЗаказчика Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда 
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТаблицы, "МатериалыЗаказчика", СтрокаСведенийОНоменклатуре);
		КонецЕсли;
			
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РТиУ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДСПереводНаДругойСчет(Объект)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДСПлатежиВБюджет(Объект)
	ПлатежноеПоручениеОснование = Объект.ДокументОснование;
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Если Объект.Проведен Тогда
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация,
			Объект.Номенклатура,
			Объект.Склад);
		Если Не ЗначениеЗаполнено(Объект.СчетУчета) Тогда
			Объект.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
			Объект.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
				Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Комплектующие Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
					СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
				КонецЕсли;
	
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Склады(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦенРозничнойТорговли) Тогда
		НаименованиеТипаЦен = НСтр("ru='Розничная цена'");
		ВидЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НаименованиеТипаЦен);
		
		Если Не ЗначениеЗаполнено(ВидЦены) Тогда
			ВидОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
			ВидОбъект.Наименование = НаименованиеТипаЦен;
			ВидОбъект.Записать();
			ВидЦены = ВидОбъект.Ссылка;
		КонецЕсли;
	
		Объект.ТипЦенРозничнойТорговли = ВидЦены;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Прочее(Объект)
	// Заполняем счета учета по текущим данным объекта.
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Расчеты(Объект)
	ПрименениеУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = СписаниеСРасчетногоСчетаФормы.СтавкаНДСРасшифровкиПлатежа(Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПрименениеУСН);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
	
	ПлатежноеПоручениеОснование = Объект.ДокументОснование;
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Если Объект.Проведен Тогда
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;	
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтатьиДоходов(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидДеятельностиДляНалоговогоУчетаЗатрат", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПрочихДоходовИРасходов", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидПрочихДоходовИРасходов) Тогда
		Объект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтатьиРасходов(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидДеятельностиДляНалоговогоУчетаЗатрат", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПрочихДоходовИРасходов", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидПрочихДоходовИРасходов) Тогда
		Объект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидРасходовНУ", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидРасходовНУ) Тогда
		Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект)
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			// Устанавливаем основной договор, если он не найден.
			СтрокаТЧ.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетУчетаРасчетовСКонтрагентом = Неопределено;
		СчетУчетаРасчетовПоАвансам = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
				Или Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетНаОплатуПокупателю(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураВыданный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Если Объект.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		Объект.НомерПлатежноРасчетногоДокумента = Объект.ПлатежноРасчетныеДокументы[0].НомерДокумента;
		Объект.ДатаПлатежноРасчетногоДокумента  = Объект.ПлатежноРасчетныеДокументы[0].ДатаДокумента;
	КонецЕсли;
		
	Если Объект.Исправление Тогда
		Если ЗначениеЗаполнено(Объект.ИсправляемыйСчетФактура)
			И ОбщегоНазначения.СсылкаСуществует(Объект.ИсправляемыйСчетФактура)
			И (Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента)
			Или Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента)) Тогда
				
			РеквизитыСчетФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ИсправляемыйСчетФактура, "Дата, Номер");
			
			ДатаИсходногоДокумента  = РеквизитыСчетФактурыОснования.Дата;
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				РеквизитыСчетФактурыОснования.Номер, Ложь, Истина);
			
			Если Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента) Тогда
				Объект.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
				Объект.НомерИсходногоДокумента = НомерИсходногоДокумента;
			КонецЕсли;
	
		КонецЕсли;
				
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 
			И Не Объект.ПометкаУдаления Тогда
			Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
				
				ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
				
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
					НоваяСтрока.Документ             = Объект.Ссылка;
					НоваяСтрока.ДатаДокумента        = Объект.Дата;
					НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
					НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
					НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураПолученный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	//Подберем правильный тип документов основания
	Индекс = Объект.ДокументыОснования.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяСтрока = Объект.ДокументыОснования[Индекс];
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование)
			И Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСтрока.ДокументОснование) Тогда
			Объект.ДокументыОснования.Удалить(ТекущаяСтрока);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
		И Объект.ДокументыОснования.Количество() > 0 Тогда 
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;	
	КонецЕсли;
		
	Если Объект.Исправление Тогда
		
		Если ЗначениеЗаполнено(Объект.ИсправляемыйСчетФактура)
			И ОбщегоНазначения.СсылкаСуществует(Объект.ИсправляемыйСчетФактура)
			И (Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента)
			Или Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента)) Тогда
				
			РеквизитыСчетФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ИсправляемыйСчетФактура, "Дата, Номер");
			
			ДатаИсходногоДокумента  = РеквизитыСчетФактурыОснования.Дата;
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				РеквизитыСчетФактурыОснования.Номер, Ложь, Истина);
			
			Если Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента) Тогда
				Объект.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
				Объект.НомерИсходногоДокумента = НомерИсходногоДокумента;
			КонецЕсли;
	
		КонецЕсли;
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 И Не Объект.ПометкаУдаления Тогда
			
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Авансовый отчет",
			// то корректировку надо вводить на основании счет-фактуры.
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
	
				НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
				НоваяСтрока.Документ             = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента        = Объект.Дата;
				НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
				НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.ДокументОснование, Объект.Ссылка);
				НоваяСтрока.ИндексСтроки         = 0;
				
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Отчета комитента",
			// то ее не надо переподчинять корректировкам и вводить фиктивные документы корректировка поступления.
			ИначеЕсли ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
				Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
					
					ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
					
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						
						НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
						НоваяСтрока.Документ             = Объект.Ссылка;
						НоваяСтрока.ДатаДокумента        = Объект.Дата;
						НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
						НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
						НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТаможеннаяДекларация(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ДоговорКонтрагента = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		Объект.ДоговорКонтрагента, Объект.ДоговорКонтрагентаРегл);
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	
	КонецЕсли;
	
	#Область Товары
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
			
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета   = СчетаУчета.СчетУчета;
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетНДСТаможни) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	
	КонецЦикла;
	#КонецОбласти
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТребованиеНакладная(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	ДанныеОбъекта = Новый Структура("Дата,Организация,Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(Объект.Материалы.ВыгрузитьКолонку("Номенклатура"), ДанныеОбъекта, Ложь, Ложь);
	ОсновнаяСтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению("СписаниеМатериалов"); 
	
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_УстановкаЦенНоменклатуры(Объект)
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ВалютаЦены");
	Если ЗначениеЗаполнено(ВалютаЦены) Тогда
		Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Товары Цикл
			СтрокаТабличнойЧасти.Валюта = ВалютаЦены;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("ДатаВыписки")
		И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		Если НачалоДня(ДанныеXDTO.КлючевыеСвойства.Дата) = НачалоДня(ДанныеXDTO.ДатаВыписки) Тогда
			ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
		Иначе
			ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Проведен", Ложь);
		ПолученныеДанные.Дата     = ДанныеXDTO.КлючевыеСвойства.Дата;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.СчетБанк = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
		ПланыСчетов.Хозрасчетный.РасчетныеСчета,
		ПланыСчетов.Хозрасчетный.ВалютныеСчета);
КонецПроцедуры
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.СтатусСоставителя КАК СтатусСоставителя,
			|ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК, 
			|ПлатежныеПоручения.Ссылка.ПоказательОснования КАК ПоказательОснования, 
			|ПлатежныеПоручения.Ссылка.ПоказательПериода КАК ПоказательПериода, 
			|ПлатежныеПоручения.Ссылка.ПоказательНомера КАК ПоказательНомера, 
			|ПлатежныеПоручения.Ссылка.ПоказательДаты КАК ПоказательДаты, 
			|ПлатежныеПоручения.Ссылка.ПоказательТипа КАК ПоказательТипа, 
			|ПлатежныеПоручения.Ссылка.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Док
	|ГДЕ
	|	Док.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежныеПоручения.Ссылка.ОчередностьПлатежа КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежныеПоручения.Ссылка.ИдентификаторПлатежа КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
	ИначеЕсли ПолучатьДанныеПлатежаВБюджет Тогда
		КодБК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Налог.КодБК");
		Если ЗначениеЗаполнено(КодБК) Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + КодБК, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств)
	ПолученныеДанные.ПринятиеКналоговомуУчету = Истина;
	ПолученныеДанные.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидПрочихДоходовИРасходов) Тогда
			ДанныеИБ.ВидПрочихДоходовИРасходов = ПолученныеДанные.ВидПрочихДоходовИРасходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат = ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		КонецЕсли;
		
		ПолученныеДанные = Неопределено;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные)
	ПолученныеДанные.СчетКасса = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
								ПланыСчетов.Хозрасчетный.КассаОрганизации,
								ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
		
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			
		Иначе
			
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			ЭтоПоддерживаемыйТипКИ = ИмяТипаКИ = "Адрес"
				ИЛИ ИмяТипаКИ = "АдресЭлектроннойПочты"
				ИЛИ ИмяТипаКИ = "ВебСтраница"
				ИЛИ ИмяТипаКИ = "Другое"
				ИЛИ ИмяТипаКИ = "Телефон"
				ИЛИ ИмяТипаКИ = "Факс"
				ИЛИ (ИмяТипаКИ = "Skype" И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"));
			
			Если Не ЭтоПоддерживаемыйТипКИ Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		
		КонецЕсли;
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодобратьПлатежнуюВедомость(СтруктураДопСвойства, ТипДокумента)
	ДатаВедомости = СтруктураДопСвойства.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = СтруктураДопСвойства.НомерВедомостиНаВыплатуЗарплаты;
	ПустаяВедомость = Документы[ТипДокумента].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ДатаВедомости) ИЛИ НЕ ЗначениеЗАполнено(НомерВедомости) Тогда
		Возврат ПустаяВедомость;
	КонецЕсли;
		
	Запрос = Новый Запрос ("
		|ВЫБРАТЬ
		|	ПлатежнаяВедомость.Ссылка КАК Ссылка,
		|	ПлатежнаяВедомость.Дата,
		|	ПлатежнаяВедомость.Номер
		|ИЗ
		|	Документ.[ТипДокумента] КАК ПлатежнаяВедомость
		|ГДЕ
		|	ПлатежнаяВедомость.Дата >= &ДатаН
		|	И ПлатежнаяВедомость.Дата <= &ДатаК
		|	И ПлатежнаяВедомость.Номер = &Номер");
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(ДатаВедомости));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаВедомости));
	Запрос.УстановитьПараметр("Номер",НомерВедомости);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ТипДокумента]",ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяВедомость;
	КонецЕсли;
КонецФункции
Процедура ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля)
	// Процедура проверяет, что поля, переданные в ПроверяемыеПоля
	// при переносе из XDTO в ПолученныеДанные не изменили своих значений.
	// Например, это может произойти из-за того, что в объекте XDTO передано значение, длина которого больше, чем
	// соответствующее поле объекта базы данных. Если такие поля участвуют в поиске, то сопоставление объектов может сломаться.
	// 
	// Передавать в структуру ПроверяемыеПоля можно только поля строковых типов.
	
	Для Каждого ОписаниеПоля Из ПроверяемыеПоля Цикл
		ЗначениеПоляXDTO = "";
		ДанныеXDTO.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		Если Не ЗначениеЗаполнено(ЗначениеПоляXDTO) Тогда
			ДанныеXDTO.КлючевыеСвойства.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПоляXDTO)
			И ЗначениеЗаполнено(ПолученныеДанные[ОписаниеПоля.Значение])
			И СокрЛП(ЗначениеПоляXDTO) <> СокрЛП(ПолученныеДанные[ОписаниеПоля.Значение]) Тогда
			 ТекстИсключения = НСтр("ru = 'Поле %1 полученного объекта имеет некорректное значение %2. Загрузка не возможна.'");
			 ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОписаниеПоля.Ключ, ЗначениеПоляXDTO); 
			 ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, Префикс)
	КодВПрограмме = "";
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КлючевыеСвойства.КодВПрограмме;
	ИначеЕсли ДанныеXDTO.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КодВПрограмме;
	КонецЕсли; 
	
	Если КодВПрограмме <> "" Тогда
		ПолученныеДанные.Код = Лев(КодВПрограмме, 3) + Префикс + Сред(КодВПрограмме, 5);
	КонецЕсли;
КонецПроцедуры
Процедура ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	#Область Мержевание
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"Дата,ДоговорКонтрагента,ВалютаДокумента,Комментарий,
		|КратностьВзаиморасчетов,КурсВзаиморасчетов,
		|Организация,Ответственный,Склад,
		|СуммаВключаетНДС,
		|НДСВключенВСтоимость,Номер,СуммаДокумента");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС, СчетРасчетов");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	#КонецОбласти
КонецПроцедуры
Функция РазличныеВидыДоговоров(МассивДоговоров)
	ВидыДоговоров = Новый Соответствие;
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат ВидыДоговоров;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Договоры", МассивДоговоров);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&Договоры)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДоговоров.Вставить(Выборка.ВидДоговора, Истина);
	КонецЦикла;
	
	Возврат ВидыДоговоров;
КонецФункции
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания)
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		
		ЗаполнитьДоговорДаннымиЗаполнения(НовыйОбъект, ПараметрыСоздания.ЗначенияЗаполнения);
		
	КонецЕсли;
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора
		// записать предупреждение в журнал регистрации
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ДоговорыКонтрагентов, 
			НовыйОбъект.Ссылка,
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка);
	
	Возврат НовыйОбъект.Ссылка;
КонецФункции
Процедура СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена)
	МассивДокументов = КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке;
	
	Для Каждого ОснованиеПКО Из МассивДокументов Цикл
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументПКО
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ОснованиеПКО);
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			СсылкаНаПКО = Выборка.ДокументПКО;
			ДокументПКО = СсылкаНаПКО.ПолучитьОбъект();
		Иначе
			//Автоматически создадим документ ПКО отразив в нем розничную выручку
			ДокументПКО             = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументПКО.Дата        = ОснованиеПКО.Дата;
			ДокументПКО.Комментарий = НСтр("ru = '#Создан автоматически при обмене '");
		КонецЕсли;
		
		НужноУстанавливатьНовыйНомер = ДокументПКО.Организация <> ОснованиеПКО.Организация;
		
		ДокументПКО.ВалютаДокумента   = ОснованиеПКО.ВалютаДокумента;
		ДокументПКО.Организация       = ОснованиеПКО.Организация;
		ДокументПКО.ПодразделениеОрганизации = ОснованиеПКО.ПодразделениеОрганизации;
		ДокументПКО.Ответственный     = ОснованиеПКО.Ответственный;
		ДокументПКО.ДокументОснование = ОснованиеПКО;
		
		Если НужноУстанавливатьНовыйНомер Тогда
			ДокументПКО.УстановитьНовыйНомер();
		КонецЕсли;
	
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьПоОтчетуОРозничныхПродажах(ДокументПКО, ОснованиеПКО);
		
		Если ДокументПКО.СуммаДокумента = 0 Тогда
			// Не удалось надлежащим образом заполнить документ. Не стоит его записывать.
			Продолжить;
		КонецЕсли;
	
		ДокументПКО.Проведен = Истина;
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДокументПКО, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
		ДокументПКО.Записать(РежимЗаписиДокумента.Запись);
		
		НоваяСтрока = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
		НоваяСтрока.ДокументСсылка = ДокументПКО.Ссылка;
		НоваяСтрока.ДатаДокумента  = ДокументПКО.Дата;
	КонецЦикла;
КонецПроцедуры
Процедура СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена)
	// Необходимо обеспечить следующий порядок заполнения:
	// - справочники
	// - документы кроме корректировок и счетов-фактур
	// - корректировки поступления и реализации, созданные на основании исправительных счетов-фактур (в хронологическом порядке)
	// - счета-фактуры
	// - исправительные счет-фактуры
	
	ЗагруженныеОбъекты = КомпонентыОбмена.ЗагруженныеОбъекты;
	ЗагруженныеОбъекты.Колонки.Добавить("Очередность");
	ЗагруженныеОбъекты.Колонки.Добавить("ДатаДляСортировкиДокументов");
	ЗагруженныеОбъекты.Колонки.Добавить("НомерИсправленияДляСортировкиКорректировок");
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъекты Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Объект.МетаДанные();
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
			СтрокаТаблицы.Очередность = 1;
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			
			СтрокаТаблицы.ДатаДляСортировкиДокументов = СтрокаТаблицы.Объект.Дата;
			
			Если ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				Если СтрокаТаблицы.Объект.Исправление Тогда
					СтрокаТаблицы.Очередность = 7;
				Иначе
					СтрокаТаблицы.Очередность = 6;
				КонецЕсли;
	
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				СтрокаТаблицы.Очередность = 5;
				СтрокаТаблицы.НомерИсправленияДляСортировкиКорректировок = СтрокаТаблицы.Объект.НомерИсправления;
				
			Иначе
				СтрокаТаблицы.Очередность = 4;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Очередность = 3;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеОбъекты.Сортировать("Очередность, ДатаДляСортировкиДокументов, НомерИсправленияДляСортировкиКорректировок");
КонецПроцедуры
Процедура СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	СкладИзПолученныхДанных = ПолученныеДанные.Склад;
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) Тогда
		ПолученныеДанные.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СтавкаНДСВРознице, ОтражениеВУСН");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция СпособОтраженияРасходов(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов)
	Если НЕ ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов) Тогда
		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	КонецЕсли;
	
	// Сначала попробуем найти способ отражения расходов по наименованию.
	// Если он есть - вернем его, поиск по счетам учета уже делать не будем.
	// Если такого способа отражения расходов нет (или не заполнено НаименованиеСпособаОтраженияРасходов),
	// то конвертируем счета учета и попробуем найти способ отражения по счетам учета.
	// При этом обязательно должен быть указан счет затрат.
	
	Если XDTOСпособаОтраженияРасходов.Свойство("СчетЗатрат")
		И ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов.СчетЗатрат) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоРеквизитамЗатрат(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасходов)
		И XDTOСпособаОтраженияРасходов.Свойство("НаименованиеСпособаОтраженияРасходов")
		И ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов.НаименованиеСпособаОтраженияРасходов) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоНаименованию(XDTOСпособаОтраженияРасходов.НаименованиеСпособаОтраженияРасходов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоУмолчанию();
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоНаименованию(НаименованиеСпособаОтраженияРасходов)
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(НаименованиеСпособаОтраженияРасходов) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Наименование", НаименованиеСпособаОтраженияРасходов);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыОтраженияРасходовПоАмортизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизации.Наименование = &Наименование
		|	И СпособыОтраженияРасходовПоАмортизации.ПометкаУдаления = ЛОЖЬ";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СпособОтраженияРасходов = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоРеквизитамЗатрат(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов)
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	СчетЗатрат = СчетПоКоду(XDTOСпособаОтраженияРасходов.СчетЗатрат);
	Если ЗначениеЗаполнено(СчетЗатрат) Тогда
		
		ЗначенияАналитикиОтраженияЗатрат = ЗначенияАналитикиДляОтраженияЗатрат(КомпонентыОбмена, СчетЗатрат, XDTOОрганизация, XDTOСпособаОтраженияРасходов); 
		
		ЗаполненоХотяБыОдноСубконто = ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто1")
			ИЛИ ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто2")
			ИЛИ ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто3");
			
		Если ЗаполненоХотяБыОдноСубконто Тогда
			СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитикиОтраженияЗатрат);
			Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
				СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьСпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитикиОтраженияЗатрат);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоУмолчанию()
	//Попытка найти способ отражения расходов по умолчанию
	НаименованиеПоУмолчанию = НСтр("ru='Способ отражения расходов по умолчанию'");
	
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	
	Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
		СпособОтраженияРасходовОбъект = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		СпособОтраженияРасходовОбъект.Наименование = НаименованиеПоУмолчанию;
		СтрокаЗатраты = СпособОтраженияРасходовОбъект.Способы.Добавить();
		СтрокаЗатраты.КОэффициент = 1;
		СтрокаЗатраты.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
		СпособОтраженияРасходовОбъект.Записать();
		
		СпособОтраженияРасходов = СпособОтраженияРасходовОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособУчетаНДСПоНалогообложению(Налогообложение)
	СпособУчетаНДС = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Налогообложение) Тогда
		Возврат СпособУчетаНДС;	
	КонецЕсли;
	
	Если Налогообложение.Значение = "ПродажаОблагаетсяЕНВД"
		ИЛИ Налогообложение.Значение = "ПродажаНеОблагаетсяНДС" Тогда
		СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
	ИначеЕсли Налогообложение.Значение = "ПродажаОблагаетсяНДС"
			ИЛИ Налогообложение.Значение = "НалоговыйАгентПоНДС" Тогда
		СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	ИначеЕсли Налогообложение.Значение = "ПродажаНаЭкспорт" Тогда
		СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
	ИначеЕсли Налогообложение.Значение = "ПоФактическомуИспользованию" 
		ИЛИ Налогообложение.Значение = "ОпределяетсяРаспределением"  Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
	КонецЕсли;
	
	Возврат СпособУчетаНДС;
КонецФункции
Функция СсылкаПоЗначениямXDTO(КомпонентыОбмена, ИмяПКО, ЗначениеXDTO)
	ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
	Возврат ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗначениеXDTO, ПКО, "ПолучитьСсылку").Ссылка;
КонецФункции
Функция СтавкаНДСЧислом(СтавкаНДС)
	СтавкиНДС = Перечисления.СтавкиНДС;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20,     20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20_120, 20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18,     18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18_118, 18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10,     10);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10_110, 10);
	
	СтавкаНДСЧислом = СоответствиеСтавок.Получить(СтавкаНДС);
	СтавкаНДСЧислом = ?(СтавкаНДСЧислом = Неопределено, 0, СтавкаНДСЧислом);
	
	Возврат СтавкаНДСЧислом;
КонецФункции
Функция СтруктураКонвертацииДокументаРасчетов(XDTOДокументРасчетов)
	ИмяПКО = ИмяПКОПоXDTOДокументаРасчетов(XDTOДокументРасчетов);
		
	Если ИмяПКО <> Неопределено Тогда
		Инструкция = Новый Структура("Значение", XDTOДокументРасчетов); 
		Инструкция.Вставить("ИмяПКО", ИмяПКО);
		Возврат Инструкция;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция СчетПоКоду(КодСчета)
	Если ЗначениеЗаполнено(КодСчета) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("КодСчета", КодСчета);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Счет.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счет
		|ГДЕ
		|	Счет.Код = &КодСчета";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Процедура СчетФактураВыданный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ПолученныеДанные.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) И ЗначениеЗаполнено(ПолученныеДанные.ДокументОснование) Тогда
		ПолученныеДанные.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура СчетФактураВыданный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаВыставления = 2;
	Иначе
		ПолученныеДанные.КодСпособаВыставления = 1;
	КонецЕсли;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Дата и номер исходного документа: могут быть указаны 
	// - либо в шапке 
	// - либо в ТЧ в зависимости от версии формата
	//Указанные в шапке - загружаются и в шапку и в ТЧ.
	//Указанные в ТЧ - загружаются только в ТЧ.
	Если ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
		ПолученныеДанные.ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
		ПолученныеДанные.НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
	КонецЕсли;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ПолученныеДанные.Исправление = Истина;
	КонецЕсли;
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		КолонкиТЧ = ДанныеXDTO.ДокументыОснования.Колонки;
		ЕстьКолонкаДатаИсхДокумента = (КолонкиТЧ.Найти("ДатаИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИсхДокумента = (КолонкиТЧ.Найти("НомерИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаДатаИспрИсхДокумента = (КолонкиТЧ.Найти("ДатаИсправленияИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИспрИсхДокумента = (КолонкиТЧ.Найти("НомерИсправленияИсходногоДокумента") <> Неопределено);
	
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			СтруктураДанныхСтроки = Новый Структура;
			//Дата и номер исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Указанные в шапке - загружаются и в шапку и в ТЧ.
			//Указанные в ТЧ - загружаются только в ТЧ.
			ДатаИсходногоДокумента = Неопределено;
			НомерИсходногоДокумента = Неопределено;
			Если ЕстьКолонкаДатаИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = Строка.ДатаИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаНомерИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = Строка.НомерИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
			КонецЕсли;
			//Дата и номер исправления исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Загружаются в ТЧ, при загрузке из шапки - только в превую строку ТЧ.
			НомерИсправленияИсходногоДокумента = Неопределено;
			ДатаИсправленияИсходногоДокумента = Неопределено;
			Если ЭтоПерваяСтрока Тогда
				Если ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсправленияИсходногоДокумента) Тогда
					ДатаИсправленияИсходногоДокумента = ДанныеXDTO.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента) Тогда
					НомерИсправленияИсходногоДокумента = ДанныеXDTO.НомерИсправленияИсходногоДокумента;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьКолонкаНомерИспрИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсправленияИсходногоДокумента) Тогда
				НомерИсправленияИсходногоДокумента = Строка.НомерИсправленияИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаДатаИспрИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсправленияИсходногоДокумента) Тогда
				ДатаИсправленияИсходногоДокумента = Строка.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", ДатаИсправленияИсходногоДокумента);
			КонецЕсли;
			
			ТипДокументаОснования = Строка.ДокументОснование.ТипЗначения;
			Если Найти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
				ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику";
			ИначеЕсли Найти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
				ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
			ИначеЕсли Найти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаДолга_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаПоступления";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаРеализации_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
				ИмяПКО = "Документ_ОтчетДавальцу_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
				ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Получение";		
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
				
				Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
					ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
	
			ЭтоПерваяСтрока = Ложь;
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//Платежно-расчетные документы
	МассивСтрокДокументы = Новый Массив;
	Если ДанныеXDTO.Свойство("ПлатежноРасчетныеДокументы") И ЗначениеЗаполнено(ДанныеXDTO.ПлатежноРасчетныеДокументы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ДатаДокумента", "ДатаДокумента");
		ПравилаЗаполнения.Вставить("НомерДокумента", "НомерДокумента");
		Для Каждого Строка Из ДанныеXDTO.ПлатежноРасчетныеДокументы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокДокументы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПлатежноРасчетныеДокументы", МассивСтрокДокументы);
	КонецЕсли;
	
	//Авансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
КонецПроцедуры
Процедура СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		ПолученныеДанные.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ПолученныеДанные.ДокументОснование)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ПолученныеДанные.ДокументОснование.Метаданные()) Тогда
		ПолученныеДанные.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	Если ПолученныеДанные.СчетаФактурыВыданныеПокупателям.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетФактураВыданныйПокупателю) Тогда
		ПолученныеДанные.СчетФактураВыданныйПокупателю = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		ПолученныеДанные.Субкомиссионер = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].Субкомиссионер;
	КонецЕсли;
	
	ПолученныеДанные.Дата = КонецДня(ПолученныеДанные.Дата);
	
	Если ДанныеИБ = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПолученныеДанные);
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументОснование)
			И ОбщегоНазначения.СсылкаСуществует(СтруктураПараметров.ДокументОснование) Тогда
	
			ПолученныеДанные.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	Иначе
		Если КонецДня(ДанныеИБ.Дата) = ПолученныеДанные.Дата Тогда
			ПолученныеДанные.Дата = ДанныеИБ.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаПолучения = 2;
	Иначе
		ПолученныеДанные.КодСпособаПолучения = 1;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ПолученныеДанные.Исправление = Истина;
	КонецЕсли;
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			
			СтруктураДанныхСтроки = Новый Структура();
			
			ИмяПКО = ИмяПКОПоXDTOДокументаОснования(Строка.ДокументОснование);
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("НомерИсходногоДокумента"), 
				ДанныеXDTO.НомерИсходногоДокумента, 0));
			СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента",
				?(ДанныеXDTO.Свойство("ДатаИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсходногоДокумента, Дата(1, 1, 1)));
			СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсправленияИсходногоДокумента, Дата(1, 1, 1)));
			Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") Тогда 
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", ДанныеXDTO.НомерИсправленияИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("УчитыватьИсправлениеИсходногоДокумента", ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента));
			КонецЕсли;
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
			Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
			
			Если ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг" Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, "ПТиУ_ПоступлениеДопРасходов");
				СтруктураДанныхСтроки = Новый Структура("ДокументОснование", ТекДокументОснование);
				МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			ЭтоПерваяСтрока = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//АВансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
	// Счета фактуры выданные покупателям
	МассивСтрокСФ = Новый Массив; 
	Если ДанныеXDTO.Свойство("СчетаФактурыВыданныеПокупателям")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетаФактурыВыданныеПокупателям) Тогда
		// Из табличной части
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СчетФактураВыданный", "СчетФактура");
		ПравилаЗаполнения.Вставить("Субкомиссионер", "Субкомиссионер");
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("СуммаНДС", "НДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		Для Каждого Строка Из ДанныеXDTO.СчетаФактурыВыданныеПокупателям Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	ИначеЕсли ДанныеXDTO.Свойство("ДанныеРеализацииСчетФактураВыставленный") 
		И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный) Тогда
		// Из шапки
		СтруктураДанныхСтроки = Новый Структура("СчетФактура, НДС, Сумма, Субкомиссионер, Покупатель", 
				ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный,
				ПолученныеДанные.СуммаНДС, ПолученныеДанные.Сумма, 
				Неопределено, Неопределено);
		Если ДанныеXDTO.Свойство("ДанныеРеализацииСубкомиссионер") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСубкомиссионер) Тогда
			СтруктураДанныхСтроки.Субкомиссионер = ДанныеXDTO.ДанныеРеализацииСубкомиссионер;
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ДанныеРеализацииКонечныйПокупатель") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель) Тогда
			СтруктураДанныхСтроки.Покупатель = ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель;
		КонецЕсли;
		МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
	КонецЕсли;
	Если МассивСтрокСФ.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетаФактурыВыданныеПокупателям", МассивСтрокСФ);
		ПолученныеДанные.СводныйКомиссионный = (МассивСтрокСФ.Количество() > 1);
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьВидОперацииКорректировкиДолга(ПолученныеДанные)
	// Устанавливаем реквизиты ВидОперации, ВидАвансаЗадолженности, ТипАвансаЗадолженности в зависимости от состава табличных
	// частей и видов договоров в этих табличных частях
	
	ДоговорыДебиторскойЗадолженности = ПолученныеДанные.ДебиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровДебиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыДебиторскойЗадолженности);
	
	ДоговорыКредиторскойЗадолженности = ПолученныеДанные.КредиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровКредиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыКредиторскойЗадолженности);
	
	// Если есть вид договора Прочее, то всегда используем "ВидОперации" "Прочее"
	Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено
		ИЛИ ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	// В табличной части должны быть договора только одного вида - с поставщиком или с покупателем.
	// Если это не так - используем вид операции "Прочее"
	Если (ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено)
		 ИЛИ (ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    	И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// При списании или переносе задолженности должна быть заполнена только дебиторская или только кредиторская задолженность.
		Если ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0
			И ПолученныеДанные.КредиторскаяЗадолженность.Количество() > 0 Тогда
			// Записи есть в обоих таблицах - используем вид операции Прочее
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
		ИначеЕсли ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		    // Заполнена только дебиторская задолженность.
		    // В табличной части могут быть только задолженность покупателя или авансы поставщику
		    Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С поставщиком", значит это аванс поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		    КонецЕсли;
		Иначе
		    // Заполнена только кредиторская задолженность.
		    // В табличной части могут быть только задолженность поставщику или авансы от покупателя.
		    Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С покупателем", значит это аванс покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику;
		    КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
		// При взаимозачете задолженности заполнены обе табличные части, при этом должны выполниться одно из 2-х условий:
		//  - в дебиторской задолженности должны быть только покупатели, в кредиторской - только поставщики (оставляем вид операции ЗачетЗадолженности) 
		//  - в дебиторской задолженности только поставщики, в кредиторской - только покупатели (используем вид операции ЗачетАвансов)
		
		Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
			// В дебиторской задолженности указаны покупатели, значит в кредиторской задолженности должны быть либо поставщики, либо договоры комиссии
			// Если это не так и в кредиторской задолженности есть Покупатели - то нужно использовать Прочее
			Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
			// В дебиторской задолженности указаны поставщики, значит в кредиторской задолженности должны быть либо покупатели, либо договоры комиссии
			// Если это не так и в кредиторской задолженности есть Покупатели - то нужно использовать Прочее
			// Если условие выполняется - то нужно изменить вид операции на ЗачетАвансов
			Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
			// В кредиторской задолженности указаны поставщики, значит в дебиторской задолженности должны быть либо покупатели, либо договоры комиссии
			// Если это не так и в дебиторской задолженности есть поставщики - то нужно использовать Прочее
			Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
			// В кредиторской задолженности указаны покупатели, значит в дебиторской задолженности должны быть либо поставщики, либо договоры комиссии
			// Если это не так и в дебиторской задолженности есть Поставщики - то нужно использовать Прочее
			// Если условие выполняется - то нужно изменить вид операции на ЗачетАвансов
			Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			КонецЕсли;
		КонецЕсли;
		
		// Так как для логики работы документа при взаимозачете не важно, какой будет вид аванса задолженности, то всегда устанавливаем покупателя.
		Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		КонецЕсли;
		
	ИначеЕсли ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		// При переносе поддерживается только "Списание задолженности", все остальные виды операций загружаются как "Прочее"
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.КонтрагентКредитор = ПолученныеДанные.КонтрагентДебитор Тогда
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.СамогоКонтрагента;
	Иначе
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.ТретьегоЛица;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьЗначенияФункциональныхОпций()
	// Использование корректировок.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКорректировочныеДокументы") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаПоступления КАК Док
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаРеализации КАК Док");
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьКорректировочныеДокументы.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ДанныеXDTO, ОрганизацияXDTO)
	ПодразделениеXDTO = Неопределено;
	ДанныеXDTO.Свойство("ВышестоящееПодразделение", ПодразделениеXDTO);
	Если ЗначениеЗаполнено(ПодразделениеXDTO)
		И ЗначениеЗаполнено(ОрганизацияXDTO) Тогда
	
		ПодразделениеXDTO.Вставить("Организация", ОрганизацияXDTO);
		
		УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);	
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, ПользовательскийПрефикс)
	НомерДокумента = ?(ДанныеXDTO.Свойство("Номер"), ДанныеXDTO.Номер, ДанныеXDTO.КлючевыеСвойства.Номер);
	
	ДлинаПрефикса = СтрДлина(ПользовательскийПрефикс);
	НачалоЗамены  = 5;
	НомерДокументаСПрефиксом = Лев(НомерДокумента, НачалоЗамены) + ПользовательскийПрефикс + Сред(НомерДокумента, НачалоЗамены + ДлинаПрефикса + 1);
	
	ПолученныеДанные.Номер = НомерДокументаСПрефиксом;
	
	ДанныеXDTOДляПроверки = Новый Структура("Номер", НомерДокументаСПрефиксом);
	
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTOДляПроверки, ПроверяемыеПоля);
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	// Например, если отсутствует ДатаВыписки в ПБДС и СБДС документ должен быть не проведен.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
	
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	Если НЕ ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.Проведен = Ложь;
		ИначеЕсли ПризнакПроведенПолученный = Ложь Тогда
			ПолученныеДанные.Проведен = Ложь;
		Иначе
			// Если документы при загрузке не проводятся, признак проведения остается как в базе-получателе.
			ПолученныеДанные.Проведен = ДанныеИБ.Проведен;
		КонецЕсли;
	Иначе
		ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	КонецЕсли;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьСтавкуНДС4и2ВДоговоре(Объект)
	Если Объект.ДополнительныеСвойства.Свойство("НДСПоСтавкам4и2")
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ДоговорКонтрагента) Тогда
		
		НДСПоСтавкам4и2ВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "НДСПоСтавкам4и2");
		НДСПоСтавкам4и2Новая     = Объект.ДополнительныеСвойства.НДСПоСтавкам4и2;
		ДоговорМодифицирован     = Ложь;
		
		Если НДСПоСтавкам4и2Новая
			И Не НДСПоСтавкам4и2ВДоговоре Тогда
			ДоговорМодифицирован = Истина;
		Иначе
			Если Объект.ДополнительныеСвойства.НДСПоСтавкам18и10
				И НДСПоСтавкам4и2ВДоговоре Тогда
				ДоговорМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоговорМодифицирован Тогда
			ДоговорОбъекта = Объект.ДоговорКонтрагента.ПолучитьОбъект();
			ДоговорОбъекта.ОбменДанными.Загрузка = Истина;
			ДоговорОбъекта.НДСПоСтавкам4и2       = НДСПоСтавкам4и2Новая;
			ДоговорОбъекта.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10)
	Если ЗначениеЗаполнено(Строка.СтавкаНДС)
		И ЗначениеЗаполнено(Строка.СтавкаНДС.Значение) Тогда
		Если Строка.СтавкаНДС.Значение = "НДС2" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС2_102" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10_110";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4" Тогда
		    СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18";
		    НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4_104" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18_118";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС18"
			Или Строка.СтавкаНДС.Значение = "НДС18_118"
			Или Строка.СтавкаНДС.Значение = "НДС10"
			Или Строка.СтавкаНДС.Значение = "НДС10_110" Тогда
			НДСПоСтавкам18и10 = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВидыОплатПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ДатаОкончанияПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("ЗагруженныеОбъекты");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("ПравилаЗагрузкиПодразделений");
	ПараметрыКонвертации.Вставить("РазрешитьПроведениеДокументовПриЗагрузке");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансыКредитыЗаймы");
	ПараметрыКонвертации.Вставить("НоменклатурнаяГруппаПоУмолчанию");
	ПараметрыКонвертации.Вставить("ПрефиксыЗагруженныхДокументов");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("СчетаФактурыЗаполнитьДокументыОснования");
	ПараметрыКонвертации.Вставить("СчетФактурыПолученныеКОбработке");
	ПараметрыКонвертации.Вставить("СчетФактурыВыданныеКОбработке");
	ПараметрыКонвертации.Вставить("ОтчетыОРозничныхПродажахКОбработке");
	ПараметрыКонвертации.Вставить("НовыеДоговорыКонтрагентов");
	ПараметрыКонвертации.Вставить("СоздаватьПКОРозничнаяВыручка");
	ПараметрыКонвертации.Вставить("МассивТНВЭД");
	ПараметрыКонвертации.Вставить("СтатусыДокументовКЗагрузке");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке" Тогда 
		ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ОРП_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ОРП_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ОРП_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ОРП_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци" Тогда 
		ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВыпускПродукции" Тогда 
		ОтложеннаяОбработка_ВыпускПродукции(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентов" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентов(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух" Тогда 
		ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаДолга" Тогда 
		ОтложеннаяОбработка_КорректировкаДолга(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаПоступления" Тогда 
		ОтложеннаяОбработка_КорректировкаПоступления(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаРеализации" Тогда 
		ОтложеннаяОбработка_КорректировкаРеализации(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_НоменклатураГруппа" Тогда 
		ОтложеннаяОбработка_НоменклатураГруппа(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОприходованиеТоваров" Тогда 
		ОтложеннаяОбработка_ОприходованиеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомиссионераОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомитентуОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомитентуОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетОРозничныхПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку" Тогда 
		ОтложеннаяОбработка_ПередачаМатериаловВПереработку(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию" Тогда 
		ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО_Расчеты" Тогда 
		ОтложеннаяОбработка_ПКО_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке" Тогда 
		ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств" Тогда 
		ОтложеннаяОбработка_ПоступлениеДенежныхСредств(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДопРасходов" Тогда 
		ОтложеннаяОбработка_ПоступлениеДопРасходов(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты" Тогда 
		ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеОтПереработчика" Тогда 
		ОтложеннаяОбработка_ПоступлениеОтПереработчика(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПТиУ" Тогда 
		ОтложеннаяОбработка_ПТиУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияОтгруженныхТоваров" Тогда 
		ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияУслугПоПереработке" Тогда 
		ОтложеннаяОбработка_РеализацияУслугПоПереработке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РТиУ" Тогда 
		ОтложеннаяОбработка_РТиУ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДСПереводНаДругойСчет" Тогда 
		ОтложеннаяОбработка_СБДСПереводНаДругойСчет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДСПлатежиВБюджет" Тогда 
		ОтложеннаяОбработка_СБДСПлатежиВБюджет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Склады" Тогда 
		ОтложеннаяОбработка_Склады(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац" Тогда 
		ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Прочее" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Прочее(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Расчеты" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеТоваров" Тогда 
		ОтложеннаяОбработка_СписаниеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтатьиДоходов" Тогда 
		ОтложеннаяОбработка_СтатьиДоходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтатьиРасходов" Тогда 
		ОтложеннаяОбработка_СтатьиРасходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами" Тогда 
		ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетНаОплатуПокупателю" Тогда 
		ОтложеннаяОбработка_СчетНаОплатуПокупателю(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураВыданный" Тогда 
		ОтложеннаяОбработка_СчетФактураВыданный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураПолученный" Тогда 
		ОтложеннаяОбработка_СчетФактураПолученный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТаможеннаяДекларация" Тогда 
		ОтложеннаяОбработка_ТаможеннаяДекларация(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТребованиеНакладная" Тогда 
		ОтложеннаяОбработка_ТребованиеНакладная(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры" Тогда 
		ОтложеннаяОбработка_УстановкаЦенНоменклатуры(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Банки_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
