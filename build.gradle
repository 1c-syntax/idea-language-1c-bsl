import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

plugins {
    id "org.jetbrains.intellij" version "0.3.4"
    id "jacoco"
    id "org.jetbrains.grammarkit" version "2018.1.6"
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
}

dependencies {
    // https://mvnrepository.com/artifact/org.eclipse.lsp4j/org.eclipse.lsp4j
    compile group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.4.1'
}

apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.jetbrains.grammarkit'

group 'org.jetbrains'
version '1.0' // Plugin version

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'src/main/gen']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file('src/main/gen')
    }
}

intellij {
    version 'IC-2017.3' //Corresponds to 173. branch from plugin.xml; for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    pluginName 'Language 1C (BSL)'
    plugins ['com.github.gtache.lsp']
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    jacoco {
        append = false
    }
}

task generateParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/resources/org/bslplugin/BSL.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = 'src/main/gen'

    // path to a parser file, relative to the targetRoot
    pathToParser = '/org/bslplugin/parser/BSLParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/org/bslplugin/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

task generateLexer(type: GenerateLexer) {
    // source flex file
    source = "src/main/resources/org/bslplugin/BSL.flex"

    // target directory for lexer
    targetDir = "src/main/gen/org/bslplugin/"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "BSLLexer"

    // optional, path to the task-specific skeleton file. Default: none
    // skeleton = '/idea-flex.skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateSources() {
    dependsOn generateParser, generateLexer
}

clean.doFirst {
    delete 'src/main/gen', 'out'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

compileJava {
    dependsOn generateSources
}

